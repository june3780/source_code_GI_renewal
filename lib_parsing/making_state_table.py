import sys
import os
import json
import copy
import pandas as pd


def get_statetable(address,diff):

    clock_doubt_list=['CKLHQD24BWP12TM1PLVT', 'SEDFQNXD2BWP12TM1PLVT', 'SDFKSNOPTSBHD12BWP12TM1PLVT', 'DFQOPTSADD12BWP12TM1PLVT', 'SDFKSNXD1BWP12TM1PLVT', 'SDFQNOPTSAHXD8BWP12TM1PLVT', 'SDFKCND2BWP12TM1PLVT', 'SDFCNQD0BWP12TM1PLVT', 'SDFKSNOPTMBXD12BWP12TM1PLVT', 'SDFCNQOPTSBBD8BWP12TM1PLVT', 'SDFKSNOPTSBDXD12BWP12TM1PLVT', 'SDFOPTSBDXD8BWP12TM1PLVT', 'CKLHQD2BWP12TM1PLVT', 'SDFOPTSADXD8BWP12TM1PLVT', 'SDFQNOPTSADXD8BWP12TM1PLVT', 'SDFKSNQOPTSADXD8BWP12TM1PLVT', 'SDFKSNOPTSBDXD8BWP12TM1PLVT', 'SDFKSNQOPTSAHD8BWP12TM1PLVT', 'SDFCND8BWP12TM1PLVT', 'SDFKSND1BWP12TM1PLVT', 'SDFXD8BWP12TM1PLVT', 'SDFKCNXD2BWP12TM1PLVT', 'CKLHQD4BWP12TM1PLVT', 'SDFCNQOPTSBHXD12BWP12TM1PLVT', 'SDFCNQOPTSBDXD8BWP12TM1PLVT', 'SEDFCND0BWP12TM1PLVT', 'SDFOPTSBHXD12BWP12TM1PLVT', 'SDFOPTSBHXD8BWP12TM1PLVT', 'SDFKCNOPTMBXD8BWP12TM1PLVT', 'SDFXD1BWP12TM1PLVT', 'SDFOPTMBD8BWP12TM1PLVT', 'SEDFQND0BWP12TM1PLVT', 'SDFCNOPTSADXD8BWP12TM1PLVT', 'SDFOPTSBDXD12BWP12TM1PLVT', 'SDFQNOPTSAHD8BWP12TM1PLVT', 'SDFKSNOPTSBHXD8BWP12TM1PLVT', 'SDFKCNOPTSADXD8BWP12TM1PLVT', 'SDFQNOPTSABD8BWP12TM1PLVT', 'SDFOPTSABD8BWP12TM1PLVT', 'SDFCNOPTSBBD12BWP12TM1PLVT', 'SEDFQND2BWP12TM1PLVT', 'SDFD2BWP12TM1PLVT', 'SDFCNOPTSBDD12BWP12TM1PLVT', 'SDFCNQOPTSBBXD12BWP12TM1PLVT', 'SDFQND4BWP12TM1PLVT', 'SDFQNOPTSADD8BWP12TM1PLVT', 'SDFCNOPTSADD8BWP12TM1PLVT', 'SDFKSNOPTSABD8BWP12TM1PLVT', 'SDFKSNQD2BWP12TM1PLVT', 'DFQOPTSAHD12BWP12TM1PLVT', 'SEDFCND4BWP12TM1PLVT', 'SDFOPTSBBD12BWP12TM1PLVT', 'SDFCNOPTSABD8BWP12TM1PLVT', 'SDFCND2BWP12TM1PLVT', 'SDFKCNOPTSBBXD12BWP12TM1PLVT', 'SDFCND0BWP12TM1PLVT', 'SDFOPTSADD8BWP12TM1PLVT', 'SDFOPTMBD12BWP12TM1PLVT', 'SDFQNOPTMAXD8BWP12TM1PLVT', 'SDFOPTSBBXD12BWP12TM1PLVT', 'SDFCNOPTMBD8BWP12TM1PLVT', 'SDFCNOPTMAXD8BWP12TM1PLVT', 'SDFOPTSBDD12BWP12TM1PLVT', 'SDFKSNQD4BWP12TM1PLVT', 'SEDFXD0BWP12TM1PLVT', 'SDFKSNOPTMAD8BWP12TM1PLVT', 'SDFKSNQOPTSAHD12BWP12TM1PLVT', 'SDFKCNOPTSBDXD12BWP12TM1PLVT', 'SDFQND2BWP12TM1PLVT', 'SDFKSNQOPTMAXD8BWP12TM1PLVT', 'SDFXD2BWP12TM1PLVT', 'SDFKSNOPTMBD12BWP12TM1PLVT', 'SDFKCNOPTSBHXD12BWP12TM1PLVT', 'SDFKSNOPTMBD8BWP12TM1PLVT', 'SDFKSNQOPTSADXD12BWP12TM1PLVT', 'SDFQND1BWP12TM1PLVT', 'SDFQNOPTMAD8BWP12TM1PLVT', 'SDFQNOPTSADD12BWP12TM1PLVT', 'SDFCNOPTSBBXD8BWP12TM1PLVT', 'SDFCNOPTSBDXD12BWP12TM1PLVT', 'DFQOPTSABD8BWP12TM1PLVT', 'SDFKSNOPTMBXD8BWP12TM1PLVT', 'SDFCNOPTSBDXD8BWP12TM1PLVT', 'SDFQNOPTSABXD8BWP12TM1PLVT', 'CKLHQD12BWP12TM1PLVT', 'SDFKSNXD2BWP12TM1PLVT', 'SDFKCND1BWP12TM1PLVT', 'SDFCNQD1BWP12TM1PLVT', 'SDFKSNOPTSADXD8BWP12TM1PLVT', 'SDFKCNOPTSBBXD8BWP12TM1PLVT', 'SDFKSNOPTSBHD8BWP12TM1PLVT', 'SDFD0BWP12TM1PLVT', 'SDFCNOPTMAD8BWP12TM1PLVT', 'SDFOPTMAXD8BWP12TM1PLVT', 'DFQOPTMAD8BWP12TM1PLVT', 'SDFKCNOPTSBHD12BWP12TM1PLVT', 'SDFCNXD2BWP12TM1PLVT', 'SDFCNQOPTSBBXD8BWP12TM1PLVT', 'SDFKCNXD4BWP12TM1PLVT', 'SDFCNQOPTSBDD8BWP12TM1PLVT', 'LNCSNQD2BWP12TM1PLVT', 'SEDFXD4BWP12TM1PLVT', 'SDFCNOPTMBXD12BWP12TM1PLVT', 'SDFKCNOPTMBD12BWP12TM1PLVT', 'SDFOPTMAD8BWP12TM1PLVT', 'SEDFQND4BWP12TM1PLVT', 'DFQOPTSAHD8BWP12TM1PLVT', 'SDFCNQOPTMBD8BWP12TM1PLVT', 'SDFCNQOPTMBD12BWP12TM1PLVT', 'SEDFCND2BWP12TM1PLVT', 'SDFCNQOPTMBXD8BWP12TM1PLVT', 'SDFKSNOPTMAXD8BWP12TM1PLVT', 'SDFCND4BWP12TM1PLVT', 'SDFKSNQOPTSABXD8BWP12TM1PLVT', 'SDFKSNOPTSBBD8BWP12TM1PLVT', 'SDFCNOPTSBBD8BWP12TM1PLVT', 'SDFKCNOPTSBBD12BWP12TM1PLVT', 'SDFCNXD8BWP12TM1PLVT', 'SDFKSNQOPTMAD12BWP12TM1PLVT', 'SDFKCNOPTSBBD8BWP12TM1PLVT', 'DFQD2BWP12TM1PLVT', 'SDFD4BWP12TM1PLVT', 'CKLHQD1BWP12TM1PLVT', 'CKLHQD16BWP12TM1PLVT', 'SDFXD4BWP12TM1PLVT', 'SEDFD0BWP12TM1PLVT', 'SDFKSNOPTSBHXD12BWP12TM1PLVT', 'SEDFQNXD4BWP12TM1PLVT', 'SDFKSNOPTSADD8BWP12TM1PLVT', 'SDFOPTMBXD12BWP12TM1PLVT', 'SEDFQNXD0BWP12TM1PLVT', 'SDFCNQOPTSBDXD12BWP12TM1PLVT', 'SEDFXD2BWP12TM1PLVT', 'SDFKCNOPTSBDXD8BWP12TM1PLVT', 'SDFQND0BWP12TM1PLVT', 'SDFKSNQOPTSABD8BWP12TM1PLVT', 'GSDFCNQD1BWP12TM1PLVT', 'SDFKCNOPTMBXD12BWP12TM1PLVT', 'SDFQNOPTSABXD12BWP12TM1PLVT', 'SEDFD4BWP12TM1PLVT', 'SEDFXD1BWP12TM1PLVT', 'SDFKSNQOPTSABD12BWP12TM1PLVT', 'SEDFD2BWP12TM1PLVT', 'SDFCND1BWP12TM1PLVT', 'SDFOPTSABXD8BWP12TM1PLVT', 'DFQOPTSABD12BWP12TM1PLVT', 'DFQOPTMAD12BWP12TM1PLVT', 'DFQOPTSADD8BWP12TM1PLVT', 'SDFCNQOPTSBHD12BWP12TM1PLVT', 'CKLHQD8BWP12TM1PLVT', 'SDFKCNOPTSABD8BWP12TM1PLVT', 'LNSNQD2BWP12TM1PLVT', 'SDFOPTSBDD8BWP12TM1PLVT', 'SDFKCNOPTMAXD8BWP12TM1PLVT', 'SDFQNOPTMAXD12BWP12TM1PLVT', 'SDFCNQOPTSBDD12BWP12TM1PLVT', 'SDFCNOPTSBBXD12BWP12TM1PLVT', 'SDFOPTSBBXD8BWP12TM1PLVT', 'SDFKSND4BWP12TM1PLVT', 'SDFKCNOPTSADD8BWP12TM1PLVT', 'SEDFQND1BWP12TM1PLVT', 'SDFKSNQOPTSAHXD12BWP12TM1PLVT', 'DFQD1BWP12TM1PLVT', 'SDFCNOPTMBD12BWP12TM1PLVT', 'SDFKSNOPTSBDD12BWP12TM1PLVT', 'CKLHQD20BWP12TM1PLVT', 'SDFKSNOPTSBBD12BWP12TM1PLVT', 'SDFKCND4BWP12TM1PLVT', 'SDFCNOPTSBDD8BWP12TM1PLVT', 'SDFKCNOPTSBDD12BWP12TM1PLVT', 'SDFCNQOPTSBHD8BWP12TM1PLVT', 'SDFCNQD4BWP12TM1PLVT', 'SDFCNQD2BWP12TM1PLVT', 'LNCSNQD4BWP12TM1PLVT', 'SDFKSND0BWP12TM1PLVT', 'SDFKCNOPTMAD8BWP12TM1PLVT', 'SEDFCNXD1BWP12TM1PLVT', 'CKLHQD6BWP12TM1PLVT', 'SDFCNOPTSBHXD12BWP12TM1PLVT', 'SDFD1BWP12TM1PLVT', 'SDFKCNOPTSBHXD8BWP12TM1PLVT', 'SDFKSNQOPTMAXD12BWP12TM1PLVT', 'SDFKCNOPTMBD8BWP12TM1PLVT', 'SDFKSNQOPTSADD12BWP12TM1PLVT', 'SDFKSNOPTSBBXD8BWP12TM1PLVT', 'SDFKSNQD1BWP12TM1PLVT', 'SDFOPTSBBD8BWP12TM1PLVT', 'SDFKCNOPTSABXD8BWP12TM1PLVT', 'SDFCNQOPTSBBD12BWP12TM1PLVT', 'SDFCNXD1BWP12TM1PLVT', 'SDFKCNXD1BWP12TM1PLVT', 'LNSNQD1BWP12TM1PLVT', 'SDFKSNQOPTSABXD12BWP12TM1PLVT', 'SDFKCNOPTSBDD8BWP12TM1PLVT', 'SDFQNOPTSADXD12BWP12TM1PLVT', 'SDFKSNQOPTSAHXD8BWP12TM1PLVT', 'SDFCNOPTSBHD12BWP12TM1PLVT', 'SDFCNOPTSBHD8BWP12TM1PLVT', 'SDFCNOPTSBHXD8BWP12TM1PLVT', 'SDFCNOPTMBXD8BWP12TM1PLVT', 'SDFKSNOPTSABXD8BWP12TM1PLVT', 'SEDFCNXD2BWP12TM1PLVT', 'SDFKSNOPTSBDD8BWP12TM1PLVT', 'SDFKCND0BWP12TM1PLVT', 'SDFD8BWP12TM1PLVT', 'SDFQNOPTMAD12BWP12TM1PLVT', 'SEDFCNXD4BWP12TM1PLVT', 'SDFCNQOPTSBHXD8BWP12TM1PLVT', 'SDFKSND2BWP12TM1PLVT', 'SDFKSNQOPTMAD8BWP12TM1PLVT', 'SDFKSNQD0BWP12TM1PLVT', 'SDFQNOPTSAHD12BWP12TM1PLVT', 'GDFQD1BWP12TM1PLVT', 'SDFCNXD4BWP12TM1PLVT', 'SDFQNOPTSABD12BWP12TM1PLVT', 'SDFOPTMBXD8BWP12TM1PLVT', 'SDFOPTSBHD12BWP12TM1PLVT', 'SDFKSNOPTSBBXD12BWP12TM1PLVT', 'LNSNQD4BWP12TM1PLVT', 'SDFKSNXD4BWP12TM1PLVT', 'SDFCNQOPTMBXD12BWP12TM1PLVT', 'LNCSNQD1BWP12TM1PLVT', 'SEDFQNXD1BWP12TM1PLVT', 'CKLHQD3BWP12TM1PLVT', 'SDFOPTSBHD8BWP12TM1PLVT', 'SEDFD1BWP12TM1PLVT', 'SEDFCND1BWP12TM1PLVT', 'SDFQNOPTSAHXD12BWP12TM1PLVT', 'SDFKCNOPTSBHD8BWP12TM1PLVT', 'DFQD4BWP12TM1PLVT', 'SDFCNOPTSABXD8BWP12TM1PLVT', 'SDFKSNQOPTSADD8BWP12TM1PLVT', 'DFCNOPTMAXD8BWP12TM1PLVT', 'DFMQOPTSAHD12BWP12TM1PLVT', 'SDFSNOPTSADXD8BWP12TM1PLVT', 'DFSNQOPTMBD8BWP12TM1PLVT', 'SDFMOPTMAXD8BWP12TM1PLVT', 'SDFSND1BWP12TM1PLVT', 'SDFMD2BWP12TM1PLVT', 'SDFSNQD1BWP12TM1PLVT', 'SDFMOPTSBHD8BWP12TM1PLVT', 'CKLNQD20BWP12TM1PLVT', 'DFCSND1BWP12TM1PLVT', 'DFSNQOPTSBDXD8BWP12TM1PLVT', 'SDFSNQOPTSBDD12BWP12TM1PLVT', 'DFSNQOPTSBDD12BWP12TM1PLVT', 'SDFSNQOPTSBBXD12BWP12TM1PLVT', 'SDFSNQOPTSBDXD8BWP12TM1PLVT', 'DFMQD1BWP12TM1PLVT', 'DFSNQOPTSBBXD8BWP12TM1PLVT', 'SDFSNQD0BWP12TM1PLVT', 'DFCNXD4BWP12TM1PLVT', 'SDFMXD1BWP12TM1PLVT', 'DFSNQOPTMBXD12BWP12TM1PLVT', 'CKLNQD24BWP12TM1PLVT', 'DFKCNQOPTMAD8BWP12TM1PLVT', 'DFKCNQOPTSAHD8BWP12TM1PLVT', 'CKLNQOPTMAD4BWP12TM1PLVT', 'SDFSNOPTSBDD12BWP12TM1PLVT', 'SDFMOPTSBHD12BWP12TM1PLVT', 'SDFSNXD2BWP12TM1PLVT', 'DFKCNQD2BWP12TM1PLVT', 'SDFMOPTSBDXD8BWP12TM1PLVT', 'SDFMOPTSBDD12BWP12TM1PLVT', 'SDFSNQOPTSBBD12BWP12TM1PLVT', 'DFKCNQOPTSABD8BWP12TM1PLVT', 'SDFMOPTMBD8BWP12TM1PLVT', 'SDFSNOPTMBD12BWP12TM1PLVT', 'DFCNOPTSABD8BWP12TM1PLVT', 'SDFMD1BWP12TM1PLVT', 'SDFSNXD1BWP12TM1PLVT', 'DFMQOPTSADD12BWP12TM1PLVT', 'SDFSNQD2BWP12TM1PLVT', 'DFMQOPTMAD8BWP12TM1PLVT', 'SDFMQOPTMAD12BWP12TM1PLVT', 'DFSNQD1BWP12TM1PLVT', 'DFCND2BWP12TM1PLVT', 'SDFMOPTMBXD8BWP12TM1PLVT', 'DFKCNQOPTMAD12BWP12TM1PLVT', 'SDFSNOPTSBDD8BWP12TM1PLVT', 'SDFMOPTSBDXD12BWP12TM1PLVT', 'DFKCNQOPTSADD12BWP12TM1PLVT', 'DFMQOPTSAHD8BWP12TM1PLVT', 'SDFMXD4BWP12TM1PLVT', 'SDFMOPTSBDD8BWP12TM1PLVT', 'SDFSNQOPTMBXD8BWP12TM1PLVT', 'SDFMQOPTSAHXD8BWP12TM1PLVT', 'SDFMOPTMBXD12BWP12TM1PLVT', 'DFSNQOPTSBHD12BWP12TM1PLVT', 'SDFMOPTSBBXD8BWP12TM1PLVT', 'DFCSNXD1BWP12TM1PLVT', 'SDFSNOPTSABXD8BWP12TM1PLVT', 'SDFMQOPTMAD8BWP12TM1PLVT', 'DFMQD2BWP12TM1PLVT', 'SDFSNQOPTSBHXD8BWP12TM1PLVT', 'CKLNQD8BWP12TM1PLVT', 'SDFMOPTSBBD12BWP12TM1PLVT', 'SDFMOPTSADD8BWP12TM1PLVT', 'SDFSNQOPTSBHD12BWP12TM1PLVT', 'SDFMD0BWP12TM1PLVT', 'SDFSNOPTSBBD12BWP12TM1PLVT', 'SDFSNOPTMAD8BWP12TM1PLVT', 'SDFSNOPTMAXD8BWP12TM1PLVT', 'DFMQOPTSABD12BWP12TM1PLVT', 'DFMQOPTMAD12BWP12TM1PLVT', 'SDFSNQOPTSBDD8BWP12TM1PLVT', 'DFKCNQD1BWP12TM1PLVT', 'DFSNQOPTSBHD8BWP12TM1PLVT', 'CKLNQOPTMAD1BWP12TM1PLVT', 'CKLNQD3BWP12TM1PLVT', 'DFSNQOPTSBDXD12BWP12TM1PLVT', 'SDFSNQD4BWP12TM1PLVT', 'SDFMQOPTSAHD12BWP12TM1PLVT', 'DFCNOPTSAHD8BWP12TM1PLVT', 'SDFMD4BWP12TM1PLVT', 'SDFSNOPTMBD8BWP12TM1PLVT', 'DFKCSND2BWP12TM1PLVT', 'SDFSNQOPTSBBD8BWP12TM1PLVT', 'DFSNQOPTMBXD8BWP12TM1PLVT', 'SDFMOPTSBBD8BWP12TM1PLVT', 'DFSNQD2BWP12TM1PLVT', 'SDFSNOPTSBBXD8BWP12TM1PLVT', 'SDFMOPTSBBXD12BWP12TM1PLVT', 'SDFMQOPTMAXD8BWP12TM1PLVT', 'SDFMQD4BWP12TM1PLVT', 'CKLNQOPTMAD20BWP12TM1PLVT', 'CKLNQD12BWP12TM1PLVT', 'CKLNQOPTMAD24BWP12TM1PLVT', 'SDFMQOPTSABXD8BWP12TM1PLVT', 'DFCNXD1BWP12TM1PLVT', 'DFSNQOPTSBHXD12BWP12TM1PLVT', 'CKLNQD1BWP12TM1PLVT', 'SDFMOPTSBHXD12BWP12TM1PLVT', 'DFKCSND4BWP12TM1PLVT', 'SDFMOPTSABXD8BWP12TM1PLVT', 'SDFMQOPTSADD12BWP12TM1PLVT', 'DFKCNQOPTSAHD12BWP12TM1PLVT', 'SDFSNOPTSBDXD12BWP12TM1PLVT', 'DFCND4BWP12TM1PLVT', 'SDFSND2BWP12TM1PLVT', 'SDFMOPTSBHXD8BWP12TM1PLVT', 'SDFMQOPTSAHXD12BWP12TM1PLVT', 'DFSNQOPTSBBXD12BWP12TM1PLVT', 'DFCSNXD4BWP12TM1PLVT', 'DFCNOPTSADXD8BWP12TM1PLVT', 'DFCNOPTSADD8BWP12TM1PLVT', 'SDFSNQOPTMBD8BWP12TM1PLVT', 'CKLNQOPTMAD8BWP12TM1PLVT', 'DFSNQOPTSBBD8BWP12TM1PLVT', 'SDFSNOPTSBHXD8BWP12TM1PLVT', 'SDFMXD2BWP12TM1PLVT', 'SDFSNQOPTMBXD12BWP12TM1PLVT', 'SDFSND4BWP12TM1PLVT', 'SDFMOPTSABD8BWP12TM1PLVT', 'DFCNOPTMAD8BWP12TM1PLVT', 'SDFSNQOPTSBBXD8BWP12TM1PLVT', 'SDFSNOPTSBHXD12BWP12TM1PLVT', 'CKLNQD4BWP12TM1PLVT', 'SDFMQOPTSABXD12BWP12TM1PLVT', 'SDFSNOPTSBHD12BWP12TM1PLVT', 'CKLNQOPTMAD2BWP12TM1PLVT', 'SDFSNOPTMBXD12BWP12TM1PLVT', 'SDFMQOPTSABD12BWP12TM1PLVT', 'DFCNXD2BWP12TM1PLVT', 'SDFMOPTSADXD8BWP12TM1PLVT', 'CKLNQOPTMAD16BWP12TM1PLVT', 'DFCNOPTSAHXD8BWP12TM1PLVT', 'DFCSND4BWP12TM1PLVT', 'SDFMQOPTSAHD8BWP12TM1PLVT', 'CKLNQD2BWP12TM1PLVT', 'SDFSND0BWP12TM1PLVT', 'DFSNQOPTMBD12BWP12TM1PLVT', 'SDFSNOPTSABD8BWP12TM1PLVT', 'CKLNQD16BWP12TM1PLVT', 'SDFMOPTMAD8BWP12TM1PLVT', 'SDFMQD1BWP12TM1PLVT', 'DFKCNQD4BWP12TM1PLVT', 'SDFSNQOPTSBHD8BWP12TM1PLVT', 'SDFMQOPTSADD8BWP12TM1PLVT', 'DFCSND2BWP12TM1PLVT', 'SDFSNXD4BWP12TM1PLVT', 'DFKCNQOPTSABD12BWP12TM1PLVT', 'DFMQOPTSABD8BWP12TM1PLVT', 'SDFSND8BWP12TM1PLVT', 'SDFSNOPTSBBD8BWP12TM1PLVT', 'SDFSNOPTMBXD8BWP12TM1PLVT', 'SDFSNQOPTMBD12BWP12TM1PLVT', 'DFSNQOPTSBBD12BWP12TM1PLVT', 'SDFMQOPTSABD8BWP12TM1PLVT', 'SDFSNOPTSADD8BWP12TM1PLVT', 'SDFSNQOPTSBDXD12BWP12TM1PLVT', 'SDFMQOPTMAXD12BWP12TM1PLVT', 'DFCND1BWP12TM1PLVT', 'SDFMQD0BWP12TM1PLVT', 'SDFSNOPTSBDXD8BWP12TM1PLVT', 'DFSNQOPTSBHXD8BWP12TM1PLVT', 'SDFMQD2BWP12TM1PLVT', 'DFSNQOPTSBDD8BWP12TM1PLVT', 'SDFSNXD8BWP12TM1PLVT', 'DFMQD4BWP12TM1PLVT', 'DFKCSND1BWP12TM1PLVT', 'SDFSNQOPTSBHXD12BWP12TM1PLVT', 'SDFSNOPTSBHD8BWP12TM1PLVT', 'DFCNOPTSABXD8BWP12TM1PLVT', 'DFMQOPTSADD8BWP12TM1PLVT', 'DFSNQD4BWP12TM1PLVT', 'SDFMOPTMBD12BWP12TM1PLVT', 'SDFSNOPTSBBXD12BWP12TM1PLVT', 'DFCSNXD2BWP12TM1PLVT', 'SDFMQOPTSADXD8BWP12TM1PLVT', 'SDFMQOPTSADXD12BWP12TM1PLVT', 'DFKCNQOPTSADD8BWP12TM1PLVT', 'CKLNQD6BWP12TM1PLVT', 'DFNCND1BWP12TM1PLVT', 'LND1BWP12TM1PLVT', 'DFOPTMAD8BWP12TM1PLVT', 'SDFKCNQOPTSADD12BWP12TM1PLVT', 'SDFKCNQD1BWP12TM1PLVT', 'SDFQOPTSAHD8BWP12TM1PLVT', 'SDFNSND0BWP12TM1PLVT', 'DFXD1BWP12TM1PLVT', 'EDFXD2BWP12TM1PLVT', 'SDFQOPTSADXD8BWP12TM1PLVT', 'DFKSNOPTMAD8BWP12TM1PLVT', 'DFKSNOPTSADD8BWP12TM1PLVT', 'DFD1BWP12TM1PLVT', 'SDFKCNQOPTMAD12BWP12TM1PLVT', 'SDFQOPTSAHD12BWP12TM1PLVT', 'SDFQD1BWP12TM1PLVT', 'DFKSNXD1BWP12TM1PLVT', 'SDFKCNQOPTSABXD12BWP12TM1PLVT', 'DFNCNXD4BWP12TM1PLVT', 'DFNCND2BWP12TM1PLVT', 'LHQD2BWP12TM1PLVT', 'SDFKCNQOPTSABXD8BWP12TM1PLVT', 'LND4BWP12TM1PLVT', 'SDFKCNQOPTSADD8BWP12TM1PLVT', 'SDFKCNQOPTMAXD12BWP12TM1PLVT', 'DFXD4BWP12TM1PLVT', 'DFKSNXD2BWP12TM1PLVT', 'SDFKCNQOPTSAHXD8BWP12TM1PLVT', 'SDFQD2BWP12TM1PLVT', 'SDFKCNQOPTMAXD8BWP12TM1PLVT', 'SDFQOPTSADD12BWP12TM1PLVT', 'LHQD4BWP12TM1PLVT', 'DFD4BWP12TM1PLVT', 'LHSND2BWP12TM1PLVT', 'DFOPTSADD8BWP12TM1PLVT', 'SDFKCNQOPTSAHXD12BWP12TM1PLVT', 'SDFQOPTMAXD8BWP12TM1PLVT', 'DFNXD1BWP12TM1PLVT', 'SDFKCNQOPTMAD8BWP12TM1PLVT', 'LHSND4BWP12TM1PLVT', 'SDFQOPTSABD12BWP12TM1PLVT', 'LHQD1BWP12TM1PLVT', 'SDFQOPTSAHXD12BWP12TM1PLVT', 'EDFD4BWP12TM1PLVT', 'SDFKCNQOPTSABD12BWP12TM1PLVT', 'SDFQOPTSADXD12BWP12TM1PLVT', 'SDFCSNQD1BWP12TM1PLVT', 'DFND1BWP12TM1PLVT', 'SDFKCNQD0BWP12TM1PLVT', 'SDFQOPTSABD8BWP12TM1PLVT', 'SDFKCNQOPTSADXD12BWP12TM1PLVT', 'LHQOPTDAD8BWP12TM1PLVT', 'DFKSNXD4BWP12TM1PLVT', 'SDFKCNQD2BWP12TM1PLVT', 'LHQOPTDAD4BWP12TM1PLVT', 'DFND2BWP12TM1PLVT', 'SDFQOPTMAXD12BWP12TM1PLVT', 'SDFCSNQD2BWP12TM1PLVT', 'DFKSND1BWP12TM1PLVT', 'SDFQD4BWP12TM1PLVT', 'SDFQOPTSAHXD8BWP12TM1PLVT', 'DFD2BWP12TM1PLVT', 'SDFKCNQOPTSAHD8BWP12TM1PLVT', 'SDFQD0BWP12TM1PLVT', 'DFXD2BWP12TM1PLVT', 'EDFXD1BWP12TM1PLVT', 'SDFQOPTMAD12BWP12TM1PLVT', 'SDFCSNQD4BWP12TM1PLVT', 'DFND4BWP12TM1PLVT', 'SDFKCNQOPTSAHD12BWP12TM1PLVT', 'DFKSNOPTSABD8BWP12TM1PLVT', 'DFNCNXD2BWP12TM1PLVT', 'SDFQOPTSABXD8BWP12TM1PLVT', 'SDFQOPTSADD8BWP12TM1PLVT', 'DFNCNXD1BWP12TM1PLVT', 'SDFKCNQD4BWP12TM1PLVT', 'DFNSND4BWP12TM1PLVT', 'DFNXD4BWP12TM1PLVT', 'SDFNSND1BWP12TM1PLVT', 'DFOPTSAHD8BWP12TM1PLVT', 'EDFD2BWP12TM1PLVT', 'SDFNSND4BWP12TM1PLVT', 'EDFD1BWP12TM1PLVT', 'DFKSNOPTSAHD8BWP12TM1PLVT', 'LHQOPTDAD1BWP12TM1PLVT', 'DFNSND1BWP12TM1PLVT', 'SDFQOPTMAD8BWP12TM1PLVT', 'SDFNSND2BWP12TM1PLVT', 'LHQOPTDAD2BWP12TM1PLVT', 'SDFKCNQOPTSADXD8BWP12TM1PLVT', 'DFKSND2BWP12TM1PLVT', 'SDFKCNQOPTSABD8BWP12TM1PLVT', 'LND2BWP12TM1PLVT', 'LHSND1BWP12TM1PLVT', 'DFOPTSABD8BWP12TM1PLVT', 'DFNCND4BWP12TM1PLVT', 'DFNXD2BWP12TM1PLVT', 'SDFCSNQD0BWP12TM1PLVT', 'DFNSND2BWP12TM1PLVT', 'SDFQOPTSABXD12BWP12TM1PLVT', 'EDFXD4BWP12TM1PLVT', 'DFKSND4BWP12TM1PLVT', 'SEDFQD2BWP12TM1PLVT', 'DFCNQOPTSBBXD8BWP12TM1PLVT', 'DFCNQOPTSBBD12BWP12TM1PLVT', 'SDFCNQNOPTSBHXD8BWP12TM1PLVT', 'DFMXD4BWP12TM1PLVT', 'SDFCSNXD2BWP12TM1PLVT', 'DFSND1BWP12TM1PLVT', 'SDFCSND4BWP12TM1PLVT', 'SDFCNQNOPTSBDXD12BWP12TM1PLVT', 'DFKCNXD1BWP12TM1PLVT', 'DFCNQOPTMBXD8BWP12TM1PLVT', 'DFSNXD4BWP12TM1PLVT', 'DFCNQOPTSBHD12BWP12TM1PLVT', 'SEDFQXD2BWP12TM1PLVT', 'DFSNOPTSADD8BWP12TM1PLVT', 'SDFCSND0BWP12TM1PLVT', 'DFSNOPTSADXD8BWP12TM1PLVT', 'DFSNOPTSAHXD8BWP12TM1PLVT', 'DFCNQD1BWP12TM1PLVT', 'DFCNQOPTSBHXD12BWP12TM1PLVT', 'DFSNXD1BWP12TM1PLVT', 'DFCNQOPTSBDD12BWP12TM1PLVT', 'SDFCNQNOPTMBXD12BWP12TM1PLVT', 'DFSNXD2BWP12TM1PLVT', 'SDFCNQNOPTMBD12BWP12TM1PLVT', 'DFCNQOPTMBD8BWP12TM1PLVT', 'DFSND4BWP12TM1PLVT', 'SEDFQXD0BWP12TM1PLVT', 'DFSND2BWP12TM1PLVT', 'LHCSND4BWP12TM1PLVT', 'DFMD4BWP12TM1PLVT', 'DFMD1BWP12TM1PLVT', 'DFMD2BWP12TM1PLVT', 'DFKCND2BWP12TM1PLVT', 'SEDFQD4BWP12TM1PLVT', 'DFCNQD2BWP12TM1PLVT', 'SDFCNQNOPTSBDXD8BWP12TM1PLVT', 'DFCNQOPTSBHD8BWP12TM1PLVT', 'GDFCNQD1BWP12TM1PLVT', 'SDFCNQNOPTMBXD8BWP12TM1PLVT', 'SDFCNQNOPTSBDD12BWP12TM1PLVT', 'SDFCSNXD8BWP12TM1PLVT', 'DFCNQOPTMBXD12BWP12TM1PLVT', 'SDFCSND2BWP12TM1PLVT', 'SDFCNQNOPTSBDD8BWP12TM1PLVT', 'DFCNQOPTSBBXD12BWP12TM1PLVT', 'DFKCNOPTSAHD8BWP12TM1PLVT', 'SEDFKCNQD0BWP12TM1PLVT', 'DFMOPTSADD8BWP12TM1PLVT', 'SDFCNQNOPTSBHD8BWP12TM1PLVT', 'DFKCNOPTSABD8BWP12TM1PLVT', 'SDFNXD4BWP12TM1PLVT', 'DFSNOPTSAHD8BWP12TM1PLVT', 'DFKCNXD2BWP12TM1PLVT', 'DFCNQOPTSBDXD12BWP12TM1PLVT', 'SDFND1BWP12TM1PLVT', 'SDFCSND1BWP12TM1PLVT', 'DFCNQOPTSBBD8BWP12TM1PLVT', 'SDFCNQNOPTSBBD8BWP12TM1PLVT', 'DFCNQOPTSBDD8BWP12TM1PLVT', 'DFMOPTSABD8BWP12TM1PLVT', 'DFMXD2BWP12TM1PLVT', 'LHCSND1BWP12TM1PLVT', 'DFKCNOPTSADD8BWP12TM1PLVT', 'DFSNOPTSABD8BWP12TM1PLVT', 'SDFCNQNOPTSBBXD12BWP12TM1PLVT', 'SDFCNQNOPTMBD8BWP12TM1PLVT', 'DFKCND1BWP12TM1PLVT', 'DFMOPTSAHD8BWP12TM1PLVT', 'SDFND0BWP12TM1PLVT', 'LNSND2BWP12TM1PLVT', 'SEDFKCNQD4BWP12TM1PLVT', 'DFCNQOPTSBDXD8BWP12TM1PLVT', 'SDFCSNXD4BWP12TM1PLVT', 'SDFCNQNOPTSBHXD12BWP12TM1PLVT', 'SEDFKCNQD2BWP12TM1PLVT', 'SDFND4BWP12TM1PLVT', 'DFSNOPTMAXD8BWP12TM1PLVT', 'SDFND2BWP12TM1PLVT', 'SDFCNQNOPTSBBD12BWP12TM1PLVT', 'SEDFQD1BWP12TM1PLVT', 'DFSNOPTMAD8BWP12TM1PLVT', 'DFKCND4BWP12TM1PLVT', 'SDFCSNXD1BWP12TM1PLVT', 'DFCNQD4BWP12TM1PLVT', 'SEDFQXD4BWP12TM1PLVT', 'LNSND4BWP12TM1PLVT', 'SDFCNQNOPTSBHD12BWP12TM1PLVT', 'DFKCNXD4BWP12TM1PLVT', 'DFMOPTMAD8BWP12TM1PLVT', 'SDFNXD1BWP12TM1PLVT', 'SDFCNQNOPTSBBXD8BWP12TM1PLVT', 'SEDFQXD1BWP12TM1PLVT', 'DFCNQOPTMBD12BWP12TM1PLVT', 'DFSNOPTSABXD8BWP12TM1PLVT', 'LHCSND2BWP12TM1PLVT', 'DFKCNOPTMAD8BWP12TM1PLVT', 'DFMXD1BWP12TM1PLVT', 'SDFCSND8BWP12TM1PLVT', 'LNSND1BWP12TM1PLVT', 'DFCNQOPTSBHXD8BWP12TM1PLVT', 'SDFNXD2BWP12TM1PLVT', 'SEDFQD0BWP12TM1PLVT', 'SEDFKCNQD1BWP12TM1PLVT', 'SEDFCNQD2BWP12TM1PLVT', 'SDFKCSND1BWP12TM1PLVT', 'SDFNCSND4BWP12TM1PLVT', 'SEDFKCND4BWP12TM1PLVT', 'SEDFCNQD4BWP12TM1PLVT', 'SDFKCSND4BWP12TM1PLVT', 'SDFNCND1BWP12TM1PLVT', 'SEDFKCND1BWP12TM1PLVT', 'DFNCSND2BWP12TM1PLVT', 'SDFNCND0BWP12TM1PLVT', 'SDFNCNXD2BWP12TM1PLVT', 'LHCNQD2BWP12TM1PLVT', 'SDFNCSND2BWP12TM1PLVT', 'SEDFKCND2BWP12TM1PLVT', 'SDFNCND4BWP12TM1PLVT', 'DFNCSND4BWP12TM1PLVT', 'SDFNCND2BWP12TM1PLVT', 'SDFKCSND2BWP12TM1PLVT', 'SDFNCNXD1BWP12TM1PLVT', 'SEDFCNQD0BWP12TM1PLVT', 'LHCNQD4BWP12TM1PLVT', 'SEDFCNQD1BWP12TM1PLVT', 'SDFNCSND0BWP12TM1PLVT', 'LHCNQD1BWP12TM1PLVT', 'SDFNCSND1BWP12TM1PLVT', 'SDFNCNXD4BWP12TM1PLVT', 'DFNCSND1BWP12TM1PLVT', 'SEDFKCND0BWP12TM1PLVT', 'SDFKCSND0BWP12TM1PLVT', 'EDFCNQD1BWP12TM1PLVT', 'LHCSNQD1BWP12TM1PLVT', 'LHD1BWP12TM1PLVT', 'LNCND4BWP12TM1PLVT', 'LNCND2BWP12TM1PLVT', 'EDFCNQD2BWP12TM1PLVT', 'EDFKCNQD2BWP12TM1PLVT', 'LHCSNQD4BWP12TM1PLVT', 'EDFKCNQD4BWP12TM1PLVT', 'LNQD2BWP12TM1PLVT', 'LNQD1BWP12TM1PLVT', 'LHD2BWP12TM1PLVT', 'LHCSNQD2BWP12TM1PLVT', 'LHD4BWP12TM1PLVT', 'LNQD4BWP12TM1PLVT', 'EDFKCNQD1BWP12TM1PLVT', 'LNCND1BWP12TM1PLVT', 'EDFCNQD4BWP12TM1PLVT', 'LNCNQD1BWP12TM1PLVT', 'EDFQD1BWP12TM1PLVT', 'LHCND1BWP12TM1PLVT', 'DFCSNQD4BWP12TM1PLVT', 'EDFCNXD2BWP12TM1PLVT', 'EDFCND1BWP12TM1PLVT', 'LHSNQD4BWP12TM1PLVT', 'LHCND2BWP12TM1PLVT', 'LNCNQD2BWP12TM1PLVT', 'EDFQD4BWP12TM1PLVT', 'LHSNQD1BWP12TM1PLVT', 'EDFCND4BWP12TM1PLVT', 'EDFCNXD4BWP12TM1PLVT', 'DFCSNQD2BWP12TM1PLVT', 'LHSNQD2BWP12TM1PLVT', 'LHCND4BWP12TM1PLVT', 'EDFCND2BWP12TM1PLVT', 'EDFCNXD1BWP12TM1PLVT', 'EDFQD2BWP12TM1PLVT', 'DFCSNQD1BWP12TM1PLVT', 'LNCNQD4BWP12TM1PLVT', 'EDFKCND1BWP12TM1PLVT', 'EDFKCND4BWP12TM1PLVT', 'LNCSND4BWP12TM1PLVT', 'SDFKCSNQD0BWP12TM1PLVT', 'EDFKCND2BWP12TM1PLVT', 'SDFKCSNQD4BWP12TM1PLVT', 'SDFKCSNQD2BWP12TM1PLVT', 'LNCSND1BWP12TM1PLVT', 'SDFKCSNQD1BWP12TM1PLVT', 'LNCSND2BWP12TM1PLVT']


    
    ttt=int()
    checking_combination=['MUX4XD2BWP12TM1PLVT', 'INVD9BWP12TM1PLVT', 'INVD24BWP12TM1PLVT', 'AOI221D2BWP12TM1PLVT', 'FA1D4BWP12TM1PLVT', 'INR4D4BWP12TM1PLVT', 'DEL025D1BWP12TM1PLVT', 'NR2OPTSAD16BWP12TM1PLVT', 'MUX2D0BWP12TM1PLVT', 'AO32D0BWP12TM1PLVT', 'AOI22OPTPBD16BWP12TM1PLVT', 'AOI21OPTRED6BWP12TM1PLVT', 'CKND1BWP12TM1PLVT', 'OAI211D4BWP12TM1PLVT', 'AN4D4BWP12TM1PLVT', 'AO221D4BWP12TM1PLVT', 'OA33D4BWP12TM1PLVT', 'RCIAO22D4BWP12TM1PLVT', 'OAI222D2BWP12TM1PLVT', 'OA22XD16BWP12TM1PLVT', 'OA31XD8BWP12TM1PLVT', 'TPND2D16BWP12TM1PLVT', 'CKMUX2D8BWP12TM1PLVT', 'OR3D1BWP12TM1PLVT', 'TPND3D3BWP12TM1PLVT', 'MUX2NXD8BWP12TM1PLVT', 'HA1D0BWP12TM1PLVT', 'NR2D1BWP12TM1PLVT', 'IOA22D2BWP12TM1PLVT', 'AN4D1BWP12TM1PLVT', 'RCAOI22D0BWP12TM1PLVT', 'RCAOI21D16BWP12TM1PLVT', 'RCOAI31D0BWP12TM1PLVT', 'OAI21OPTPBD16BWP12TM1PLVT', 'ND3OPTFAD4BWP12TM1PLVT', 'XOR4D0BWP12TM1PLVT', 'AO221D0BWP12TM1PLVT', 'ND3OPTPAD4BWP12TM1PLVT', 'AOI211OPTREPBD12BWP12TM1PLVT', 'OA22XD8BWP12TM1PLVT', 'ND3OPTSAD12BWP12TM1PLVT', 'IAO21D2BWP12TM1PLVT', 'CKBD1BWP12TM1PLVT', 'AO22XD16BWP12TM1PLVT', 'CKXOR2D1BWP12TM1PLVT', 'OAI211OPTRED3BWP12TM1PLVT', 'AOI211OPTRESAD8BWP12TM1PLVT', 'BUFFD24BWP12TM1PLVT', 'XOR4XD16BWP12TM1PLVT', 'AOI221D4BWP12TM1PLVT', 'AOI21OPTPBD8BWP12TM1PLVT', 'DCCKND4BWP12TM1PLVT', 'INVOPTSAD12BWP12TM1PLVT', 'INVD20BWP12TM1PLVT', 'AN3D4BWP12TM1PLVT', 'OAI21OPTPBD6BWP12TM1PLVT', 'INVD1P25BWP12TM1PLVT', 'AN3XD16BWP12TM1PLVT', 'AOI211OPTRESAD4BWP12TM1PLVT', 'XNR3XD2BWP12TM1PLVT', 'NR2OPTD6BWP12TM1PLVT', 'ND2OPTFAD8BWP12TM1PLVT', 'NR2OPTPAD12BWP12TM1PLVT', 'OAI21OPTREPBD16BWP12TM1PLVT', 'ND3OPTSAD6BWP12TM1PLVT', 'CKND2D2BWP12TM1PLVT', 'NR3OPTPAD2BWP12TM1PLVT', 'RCIAO22D0BWP12TM1PLVT', 'NR4D3BWP12TM1PLVT', 'OAI21OPTREPBD2BWP12TM1PLVT', 'AOI21OPTRED8BWP12TM1PLVT', 'INVD4BWP12TM1PLVT', 'OA33D2BWP12TM1PLVT', 'ND3XD3BWP12TM1PLVT', 'OA22XD1BWP12TM1PLVT', 'INVOPTSAD24BWP12TM1PLVT', 'NR2OPTPAD4BWP12TM1PLVT', 'AN2XD16BWP12TM1PLVT', 'CKND4BWP12TM1PLVT', 'FICIND2BWP12TM1PLVT', 'OAI22OPTPBD6BWP12TM1PLVT', 'XOR4D1BWP12TM1PLVT', 'AOI21OPTRED16BWP12TM1PLVT', 'ND3OPTFAD12BWP12TM1PLVT', 'MUX3ND0BWP12TM1PLVT', 'MUX3XD1BWP12TM1PLVT', 'RCIAO21D1BWP12TM1PLVT', 'MUX2ND0BWP12TM1PLVT', 'TPNR2D4BWP12TM1PLVT', 'OAI211OPTRESAD12BWP12TM1PLVT', 'IND2D16BWP12TM1PLVT', 'OAI22D16BWP12TM1PLVT', 'MUX2D2BWP12TM1PLVT', 'TPOAI21D1BWP12TM1PLVT', 'MUX4XD1BWP12TM1PLVT', 'XNR2OPTND4BWP12TM1PLVT', 'NR2OPTPAD16BWP12TM1PLVT', 'BUFFXD4BWP12TM1PLVT', 'AOI21OPTRESAD6BWP12TM1PLVT', 'INVD18BWP12TM1PLVT', 'OA222D2BWP12TM1PLVT', 'AO21D1BWP12TM1PLVT', 'INVD32BWP12TM1PLVT', 'AOI22OPTPBD1BWP12TM1PLVT', 'MUX2XD8BWP12TM1PLVT', 'FICOND2BWP12TM1PLVT', 'AO32D1BWP12TM1PLVT', 'OR4D8BWP12TM1PLVT', 'NR2OPTSAD24BWP12TM1PLVT', 'ND3OPTD6BWP12TM1PLVT', 'TPNR2D3BWP12TM1PLVT', 'MAOI222D2BWP12TM1PLVT', 'NR2OPTFAD8BWP12TM1PLVT', 'XOR3XD2BWP12TM1PLVT', 'XNR2XD16BWP12TM1PLVT', 'BUFFXD8BWP12TM1PLVT', 'TPOAI21D8BWP12TM1PLVT', 'FCICOND1BWP12TM1PLVT', 'OR2XD4BWP12TM1PLVT', 'AOI31D16BWP12TM1PLVT', 'XNR2XD4BWP12TM1PLVT', 'AO33D0BWP12TM1PLVT', 'OAI21D16BWP12TM1PLVT', 'IND3D16BWP12TM1PLVT', 'MUX4XD4BWP12TM1PLVT', 'IAO21D4BWP12TM1PLVT', 'TPAOI21D4BWP12TM1PLVT', 'FIICOND1BWP12TM1PLVT', 'RCAOI21D0BWP12TM1PLVT', 'GXNR2D1BWP12TM1PLVT', 'NR2XD16BWP12TM1PLVT', 'OAI33D1BWP12TM1PLVT', 'IND3D1BWP12TM1PLVT', 'OAI211OPTREPBD1BWP12TM1PLVT', 'RCOAI22D0BWP12TM1PLVT', 'CKAN2D8BWP12TM1PLVT', 'AOI21D8BWP12TM1PLVT', 'OA21D16BWP12TM1PLVT', 'AOI21OPTRED3BWP12TM1PLVT', 'RCOAI22D8BWP12TM1PLVT', 'XOR3XD0BWP12TM1PLVT', 'OA31XD1BWP12TM1PLVT', 'ND3D1BWP12TM1PLVT', 'AN3XD0BWP12TM1PLVT', 'OAI22OPTPBD8BWP12TM1PLVT', 'CKND3BWP12TM1PLVT', 'OA221D4BWP12TM1PLVT', 'AOI211XD8BWP12TM1PLVT', 'GOAI21D1BWP12TM1PLVT', 'AO211D2BWP12TM1PLVT', 'MUX3D2BWP12TM1PLVT', 'DEL250D1BWP12TM1PLVT', 'ND2D3BWP12TM1PLVT', 'AOI33D0BWP12TM1PLVT', 'AOI33XD4BWP12TM1PLVT', 'MUX4D8BWP12TM1PLVT', 'AOI33D2BWP12TM1PLVT', 'AOI211XD2BWP12TM1PLVT', 'ND3XD0BWP12TM1PLVT', 'GAOI22D1BWP12TM1PLVT', 'ND2D0BWP12TM1PLVT', 'AOI211XD0BWP12TM1PLVT', 'AN3D2BWP12TM1PLVT', 'NR3OPTD6BWP12TM1PLVT', 'OAI33XD4BWP12TM1PLVT', 'INR2XD0BWP12TM1PLVT', 'AO211D1BWP12TM1PLVT', 'OA221D2BWP12TM1PLVT', 'RCOAI31D2BWP12TM1PLVT', 'TPOAI22D2BWP12TM1PLVT', 'AO21D0BWP12TM1PLVT', 'OAI211OPTRESAD2BWP12TM1PLVT', 'IND2D2BWP12TM1PLVT', 'XOR3D2BWP12TM1PLVT', 'BUFFD1BWP12TM1PLVT', 'IND2D8BWP12TM1PLVT', 'IIND4D1BWP12TM1PLVT', 'IAO22D4BWP12TM1PLVT', 'MUX3D1BWP12TM1PLVT', 'OA211D0BWP12TM1PLVT', 'MUX4ND2BWP12TM1PLVT', 'AOI211OPTRED3BWP12TM1PLVT', 'OAI222D16BWP12TM1PLVT', 'AN2XD8BWP12TM1PLVT', 'INVD3BWP12TM1PLVT', 'NR2OPTPAD1BWP12TM1PLVT', 'OR2D2BWP12TM1PLVT', 'OAI21OPTRESAD8BWP12TM1PLVT', 'OAI211OPTREPBD6BWP12TM1PLVT', 'RCAOI21D1BWP12TM1PLVT', 'RCAOI211D4BWP12TM1PLVT', 'ND2XD4BWP12TM1PLVT', 'ND3XD1BWP12TM1PLVT', 'IOA22D1BWP12TM1PLVT', 'XNR3D0BWP12TM1PLVT', 'AO22XD2BWP12TM1PLVT', 'OAI211OPTREPBD8BWP12TM1PLVT', 'GND3D1BWP12TM1PLVT', 'OAI211OPTREPBD4BWP12TM1PLVT', 'BENCD1BWP12TM1PLVT', 'GMUX2D2BWP12TM1PLVT', 'OA22D1BWP12TM1PLVT', 'AOI31D0BWP12TM1PLVT', 'OAI33D2BWP12TM1PLVT', 'GBUFFD2BWP12TM1PLVT', 'OAI211OPTRED16BWP12TM1PLVT', 'NR3OPTFAD4BWP12TM1PLVT', 'ND2XD2BWP12TM1PLVT', 'NR2XD1BWP12TM1PLVT', 'AN2D2BWP12TM1PLVT', 'GOR2D2BWP12TM1PLVT', 'OAI31D4BWP12TM1PLVT', 'FCICOND2BWP12TM1PLVT', 'AOI21OPTRESAD2BWP12TM1PLVT', 'OAI31D8BWP12TM1PLVT', 'GAN2D2BWP12TM1PLVT', 'OA21D0BWP12TM1PLVT', 'CKMUX2D1BWP12TM1PLVT', 'IND4D4BWP12TM1PLVT', 'AOI22OPTPBD12BWP12TM1PLVT', 'MUX3ND2BWP12TM1PLVT', 'INR4D0BWP12TM1PLVT', 'XOR2XD16BWP12TM1PLVT', 'MUX2NOPTD8BWP12TM1PLVT', 'OR3XD4BWP12TM1PLVT', 'OR4D4BWP12TM1PLVT', 'TPAOI211D2BWP12TM1PLVT', 'DCCKND8BWP12TM1PLVT', 'TPAOI21D1BWP12TM1PLVT', 'AOI32D4BWP12TM1PLVT', 'ND3OPTFAD16BWP12TM1PLVT', 'OAI31D16BWP12TM1PLVT', 'INR2D1BWP12TM1PLVT', 'XOR2D0BWP12TM1PLVT', 'MUX2NXD2BWP12TM1PLVT', 'OAI21OPTRED8BWP12TM1PLVT', 'ND3XD16BWP12TM1PLVT', 'AOI21OPTREPBD8BWP12TM1PLVT', 'FICOND1BWP12TM1PLVT', 'MOAI22D0BWP12TM1PLVT', 'BUFFXD6BWP12TM1PLVT', 'XNR3XD0BWP12TM1PLVT', 'OAI21OPTPBD8BWP12TM1PLVT', 'AOI22D1BWP12TM1PLVT', 'TPND2D3BWP12TM1PLVT', 'DEL125D1BWP12TM1PLVT', 'DCCKND12BWP12TM1PLVT', 'MUX2OPTD6BWP12TM1PLVT', 'OR3D4BWP12TM1PLVT', 'RCOAI31D16BWP12TM1PLVT', 'OR2D4BWP12TM1PLVT', 'OA33D1BWP12TM1PLVT', 'AOI31D2BWP12TM1PLVT', 'FA1D2BWP12TM1PLVT', 'ND2XD0BWP12TM1PLVT', 'OA222D4BWP12TM1PLVT', 'OA22D4BWP12TM1PLVT', 'XNR3XD4BWP12TM1PLVT', 'GND2D2BWP12TM1PLVT', 'AN2D16BWP12TM1PLVT', 'TPOAI21D2BWP12TM1PLVT', 'NR3OPTPAD1BWP12TM1PLVT', 'AOI21OPTPBD6BWP12TM1PLVT', 'OR2XD2BWP12TM1PLVT', 'AOI211D1BWP12TM1PLVT', 'NR2XD4BWP12TM1PLVT', 'OAI21OPTRED4BWP12TM1PLVT', 'ND2OPTFAD16BWP12TM1PLVT', 'RCAOI211D16BWP12TM1PLVT', 'TPNR3D4BWP12TM1PLVT', 'GND2D3BWP12TM1PLVT', 'CKND2D8BWP12TM1PLVT', 'XOR4XD0BWP12TM1PLVT', 'IOA22D0BWP12TM1PLVT', 'HICOND1BWP12TM1PLVT', 'MUX3XD16BWP12TM1PLVT', 'CKMUX2D0BWP12TM1PLVT', 'AN4D8BWP12TM1PLVT', 'OA32D2BWP12TM1PLVT', 'XNR2D8BWP12TM1PLVT', 'OAI211OPTRESAD3BWP12TM1PLVT', 'XNR4XD2BWP12TM1PLVT', 'GOR2D1BWP12TM1PLVT', 'OAI21OPTPBD4BWP12TM1PLVT', 'MUX4ND4BWP12TM1PLVT', 'OAI22D2BWP12TM1PLVT', 'OR3XD2BWP12TM1PLVT', 'AOI222D0BWP12TM1PLVT', 'ND2D4BWP12TM1PLVT', 'IINR4D4BWP12TM1PLVT', 'OAI21D1BWP12TM1PLVT', 'NR2D3BWP12TM1PLVT', 'RCAOI22D4BWP12TM1PLVT', 'OAI21OPTREPBD4BWP12TM1PLVT', 'BENCD2BWP12TM1PLVT', 'OA31XD0BWP12TM1PLVT', 'FA1D1BWP12TM1PLVT', 'NR2D2BWP12TM1PLVT', 'AOI211XD1BWP12TM1PLVT', 'INR3XD16BWP12TM1PLVT', 'HICIND1BWP12TM1PLVT', 'NR3OPTFAD8BWP12TM1PLVT', 'ND4D4BWP12TM1PLVT', 'OAI31D0BWP12TM1PLVT', 'INVD16BWP12TM1PLVT', 'OA222D1BWP12TM1PLVT', 'AOI32D0BWP12TM1PLVT', 'NR3OPTPAD6BWP12TM1PLVT', 'IINR4D0BWP12TM1PLVT', 'TPND3D4BWP12TM1PLVT', 'MUX2NXD16BWP12TM1PLVT', 'TPOAI31D1BWP12TM1PLVT', 'INVOPTSAD6BWP12TM1PLVT', 'IOA21D0BWP12TM1PLVT', 'OAI221D1BWP12TM1PLVT', 'OAI211OPTRED12BWP12TM1PLVT', 'OR2XD8BWP12TM1PLVT', 'IND4D2BWP12TM1PLVT', 'MAOI22D2BWP12TM1PLVT', 'CKBD20BWP12TM1PLVT', 'OAI222D0BWP12TM1PLVT', 'OAI221D4BWP12TM1PLVT', 'OA31D8BWP12TM1PLVT', 'OAI211OPTREPBD16BWP12TM1PLVT', 'XNR3D4BWP12TM1PLVT', 'TPOAI22D16BWP12TM1PLVT', 'MUX4D16BWP12TM1PLVT', 'AO211D4BWP12TM1PLVT', 'ND3OPTPAD1BWP12TM1PLVT', 'ND2OPTFAD20BWP12TM1PLVT', 'XNR3D8BWP12TM1PLVT', 'BUFFD20BWP12TM1PLVT', 'RCOAI21D0BWP12TM1PLVT', 'CKAN2D2BWP12TM1PLVT', 'MUX2D16BWP12TM1PLVT', 'OAI21OPTRESAD6BWP12TM1PLVT', 'AN2XD0BWP12TM1PLVT', 'IND2XD2BWP12TM1PLVT', 'OAI22OPTPBD16BWP12TM1PLVT', 'ND3OPTPAD16BWP12TM1PLVT', 'AO222D1BWP12TM1PLVT', 'INVOPTSAD18BWP12TM1PLVT', 'OAI21D8BWP12TM1PLVT', 'OAI21OPTPBD12BWP12TM1PLVT', 'TPNR3D1BWP12TM1PLVT', 'ND3OPTFAD6BWP12TM1PLVT', 'MUX4D2BWP12TM1PLVT', 'NR3D1BWP12TM1PLVT', 'MAOI22D1BWP12TM1PLVT', 'MUX2ND2BWP12TM1PLVT', 'TPNR3D8BWP12TM1PLVT', 'XOR2D4BWP12TM1PLVT', 'OA32D1BWP12TM1PLVT', 'OAI221XD4BWP12TM1PLVT', 'OAI32D4BWP12TM1PLVT', 'CKND0BWP12TM1PLVT', 'XNR2D4BWP12TM1PLVT', 'OAI221D2BWP12TM1PLVT', 'CKND2D3BWP12TM1PLVT', 'AOI211OPTRESAD2BWP12TM1PLVT', 'RCOAI21D1BWP12TM1PLVT', 'OA21D2BWP12TM1PLVT', 'OR4D1BWP12TM1PLVT', 'OA211D1BWP12TM1PLVT', 'INVD21BWP12TM1PLVT', 'NR3XD1BWP12TM1PLVT', 'MUX3XD4BWP12TM1PLVT', 'NR3OPTPAD12BWP12TM1PLVT', 'HA1D2BWP12TM1PLVT', 'XNR4D2BWP12TM1PLVT', 'TPOAI21D16BWP12TM1PLVT', 'OAI211OPTRED8BWP12TM1PLVT', 'OA22D2BWP12TM1PLVT', 'AOI222D2BWP12TM1PLVT', 'INVD12BWP12TM1PLVT', 'AO31XD0BWP12TM1PLVT', 'AO22D8BWP12TM1PLVT', 'ND2OPTPAD1BWP12TM1PLVT', 'OAI21OPTREPBD12BWP12TM1PLVT', 'INVD15BWP12TM1PLVT', 'CKBD8BWP12TM1PLVT', 'ANTENNABWP12TM1PLVT', 'XOR3XD8BWP12TM1PLVT', 'GMUX2ND2BWP12TM1PLVT', 'AOI21OPTPBD16BWP12TM1PLVT', 'XNR3XD1BWP12TM1PLVT', 'AOI21D4BWP12TM1PLVT', 'NR3OPTPAD8BWP12TM1PLVT', 'AOI221D1BWP12TM1PLVT', 'GMUX2ND1BWP12TM1PLVT', 'INVD0BWP12TM1PLVT', 'NR3D16BWP12TM1PLVT', 'AO33D1BWP12TM1PLVT', 'AOI211XD16BWP12TM1PLVT', 'AO22D4BWP12TM1PLVT', 'CKBD3BWP12TM1PLVT', 'OAI21OPTRED16BWP12TM1PLVT', 'INR2XD2BWP12TM1PLVT', 'AO31XD8BWP12TM1PLVT', 'RCOAI21D4BWP12TM1PLVT', 'IINR4D1BWP12TM1PLVT', 'GINVD3BWP12TM1PLVT', 'NR2OPTFAD12BWP12TM1PLVT', 'RCOAI22D1BWP12TM1PLVT', 'AOI211OPTREPBD16BWP12TM1PLVT', 'BUFFXD2BWP12TM1PLVT', 'ND4D0BWP12TM1PLVT', 'GNR3D1BWP12TM1PLVT', 'TPAOI22D0BWP12TM1PLVT', 'AO33D2BWP12TM1PLVT', 'AO33D4BWP12TM1PLVT', 'OAI211OPTRED2BWP12TM1PLVT', 'IND2XD8BWP12TM1PLVT', 'CKAN2D4BWP12TM1PLVT', 'TPND3D2BWP12TM1PLVT', 'INR2D8BWP12TM1PLVT', 'MOAI22D4BWP12TM1PLVT', 'RCIAO21D0BWP12TM1PLVT', 'OAI211D0BWP12TM1PLVT', 'XNR2D16BWP12TM1PLVT', 'XNR2XD1BWP12TM1PLVT', 'XOR3D16BWP12TM1PLVT', 'XNR3D1BWP12TM1PLVT', 'NR2XD2BWP12TM1PLVT', 'IINR4D2BWP12TM1PLVT', 'NR2OPTFAD20BWP12TM1PLVT', 'CKBD32BWP12TM1PLVT', 'TPNR3D2BWP12TM1PLVT', 'OAI33D0BWP12TM1PLVT', 'OR3D0BWP12TM1PLVT', 'TPNR3D3BWP12TM1PLVT', 'MUX2D4BWP12TM1PLVT', 'GND2D4BWP12TM1PLVT', 'OAI21D2BWP12TM1PLVT', 'ND3OPTSAD8BWP12TM1PLVT', 'IOA22D4BWP12TM1PLVT', 'AOI21OPTPBD2BWP12TM1PLVT', 'TPND2D2BWP12TM1PLVT', 'OAI21D0BWP12TM1PLVT', 'IOA21D4BWP12TM1PLVT', 'TPAOI31D1BWP12TM1PLVT', 'MUX3XD2BWP12TM1PLVT', 'TPNR2D16BWP12TM1PLVT', 'MUX2OPTD4BWP12TM1PLVT', 'MUX4XD16BWP12TM1PLVT', 'ND3OPTPAD12BWP12TM1PLVT', 'TPOAI22D8BWP12TM1PLVT', 'GXNR2D2BWP12TM1PLVT', 'IIND4D0BWP12TM1PLVT', 'AO222D4BWP12TM1PLVT', 'OR4D2BWP12TM1PLVT', 'AO31XD4BWP12TM1PLVT', 'MUX2NOPTD4BWP12TM1PLVT', 'OA31XD2BWP12TM1PLVT', 'TPAOI31D0BWP12TM1PLVT', 'CKAN2D1BWP12TM1PLVT', 'OAI22OPTPBD12BWP12TM1PLVT', 'XNR2OPTND6BWP12TM1PLVT', 'OA22XD4BWP12TM1PLVT', 'XOR4XD4BWP12TM1PLVT', 'RCAOI21D4BWP12TM1PLVT', 'ND3D3BWP12TM1PLVT', 'NR3D3BWP12TM1PLVT', 'AO21D4BWP12TM1PLVT', 'CKND2D16BWP12TM1PLVT', 'ND2D2BWP12TM1PLVT', 'AOI211OPTREPBD1BWP12TM1PLVT', 'OAI21OPTRESAD12BWP12TM1PLVT', 'CKND12BWP12TM1PLVT', 'AOI31D8BWP12TM1PLVT', 'BUFFD8BWP12TM1PLVT', 'AOI21OPTPBD1BWP12TM1PLVT', 'OAI21OPTRED3BWP12TM1PLVT', 'INVD6BWP12TM1PLVT', 'MUX3XD0BWP12TM1PLVT', 'AOI211OPTRED8BWP12TM1PLVT', 'AOI22D0BWP12TM1PLVT', 'MUX4D1BWP12TM1PLVT', 'RCAOI211D2BWP12TM1PLVT', 'AOI211OPTREPBD4BWP12TM1PLVT', 'RCOAI31D4BWP12TM1PLVT', 'XOR2XD8BWP12TM1PLVT', 'OA31D0BWP12TM1PLVT', 'INR3XD4BWP12TM1PLVT', 'AOI211OPTREPBD2BWP12TM1PLVT', 'OA31D4BWP12TM1PLVT', 'OAI21OPTREPBD8BWP12TM1PLVT', 'GINVD4BWP12TM1PLVT', 'AO31XD2BWP12TM1PLVT', 'INVOPTSAD8BWP12TM1PLVT', 'CKXOR2D4BWP12TM1PLVT', 'TPAOI21D8BWP12TM1PLVT', 'ND2OPTPAD6BWP12TM1PLVT', 'OR4XD1BWP12TM1PLVT', 'ND2XD16BWP12TM1PLVT', 'AOI21OPTPBD4BWP12TM1PLVT', 'INR3D2BWP12TM1PLVT', 'TPNR2D0BWP12TM1PLVT', 'XOR3D0BWP12TM1PLVT', 'AOI211XD4BWP12TM1PLVT', 'ND3D16BWP12TM1PLVT', 'AO31D4BWP12TM1PLVT', 'MUX2ND16BWP12TM1PLVT', 'MUX3D8BWP12TM1PLVT', 'AN3D1BWP12TM1PLVT', 'NR2OPTSAD12BWP12TM1PLVT', 'NR2D8BWP12TM1PLVT', 'OR2D1BWP12TM1PLVT', 'RCAOI21D8BWP12TM1PLVT', 'OAI221D0BWP12TM1PLVT', 'OAI21OPTRESAD4BWP12TM1PLVT', 'DEL150D1BWP12TM1PLVT', 'OAI22OPTPBD4BWP12TM1PLVT', 'OAI21OPTRED12BWP12TM1PLVT', 'AOI21D1BWP12TM1PLVT', 'DCCKND16BWP12TM1PLVT', 'INR2D0BWP12TM1PLVT', 'AOI211D0BWP12TM1PLVT', 'NR2OPTPAD6BWP12TM1PLVT', 'ND2D1BWP12TM1PLVT', 'ND3XD2BWP12TM1PLVT', 'ND2XD1BWP12TM1PLVT', 'IIND4D4BWP12TM1PLVT', 'AOI33D4BWP12TM1PLVT', 'NR3XD8BWP12TM1PLVT', 'AO31XD1BWP12TM1PLVT', 'OAI21OPTRESAD3BWP12TM1PLVT', 'BUFFD4BWP12TM1PLVT', 'TPOAI21D4BWP12TM1PLVT', 'OA31D2BWP12TM1PLVT', 'TPAOI211D0BWP12TM1PLVT', 'INR3XD0BWP12TM1PLVT', 'INR3XD1BWP12TM1PLVT', 'RCIAO21D2BWP12TM1PLVT', 'TPNR2D1BWP12TM1PLVT', 'OR2XD1BWP12TM1PLVT', 'GNR2D1BWP12TM1PLVT', 'FCICIND1BWP12TM1PLVT', 'XNR4D1BWP12TM1PLVT', 'OR3XD1BWP12TM1PLVT', 'AOI21D2BWP12TM1PLVT', 'XOR2XD1BWP12TM1PLVT', 'NR2D0BWP12TM1PLVT', 'MUX2D1BWP12TM1PLVT', 'XOR2OPTND2BWP12TM1PLVT', 'ND3OPTD12BWP12TM1PLVT', 'RCOAI31D1BWP12TM1PLVT', 'OA22D16BWP12TM1PLVT', 'OA22XD0BWP12TM1PLVT', 'XNR4D0BWP12TM1PLVT', 'AOI31D1BWP12TM1PLVT', 'CKND32BWP12TM1PLVT', 'HICIND2BWP12TM1PLVT', 'AOI222D4BWP12TM1PLVT', 'RCOAI22D16BWP12TM1PLVT', 'OAI22D4BWP12TM1PLVT', 'INR3D4BWP12TM1PLVT', 'AO222D0BWP12TM1PLVT', 'NR2XD3BWP12TM1PLVT', 'CMPE42D1BWP12TM1PLVT', 'XOR3XD1BWP12TM1PLVT', 'CKND24BWP12TM1PLVT', 'OR2XD16BWP12TM1PLVT', 'GNR3D2BWP12TM1PLVT', 'NR2OPTFAD16BWP12TM1PLVT', 'OA22D8BWP12TM1PLVT', 'OR2XD0BWP12TM1PLVT', 'OAI32XD4BWP12TM1PLVT', 'AOI221XD4BWP12TM1PLVT', 'AOI21OPTREPBD2BWP12TM1PLVT', 'NR3D4BWP12TM1PLVT', 'NR4D2BWP12TM1PLVT', 'RCOAI22D2BWP12TM1PLVT', 'INR3D8BWP12TM1PLVT', 'TPAOI22D4BWP12TM1PLVT', 'CKBD16BWP12TM1PLVT', 'OAI211OPTREPBD12BWP12TM1PLVT', 'XNR2XD0BWP12TM1PLVT', 'OAI211OPTRED4BWP12TM1PLVT', 'INVOPTSAD20BWP12TM1PLVT', 'OA22XD2BWP12TM1PLVT', 'TPAOI21D2BWP12TM1PLVT', 'MUX3ND4BWP12TM1PLVT', 'FA1D0BWP12TM1PLVT', 'OR3XD0BWP12TM1PLVT', 'TPAOI22D1BWP12TM1PLVT', 'NR2OPTSAD20BWP12TM1PLVT', 'NR2OPTSAD4BWP12TM1PLVT', 'INVD2P3BWP12TM1PLVT', 'AN3XD2BWP12TM1PLVT', 'AOI211OPTRED16BWP12TM1PLVT', 'AN2XD2BWP12TM1PLVT', 'AOI21OPTREPBD12BWP12TM1PLVT', 'OR2D16BWP12TM1PLVT', 'BMLD2BWP12TM1PLVT', 'OA32D4BWP12TM1PLVT', 'INR2D2BWP12TM1PLVT', 'ND3D8BWP12TM1PLVT', 'INR2XD1BWP12TM1PLVT', 'XOR2D2BWP12TM1PLVT', 'MUX2XD1BWP12TM1PLVT', 'IAO22D0BWP12TM1PLVT', 'ND2OPTPAD8BWP12TM1PLVT', 'ND2OPTFAD6BWP12TM1PLVT', 'OA21D1BWP12TM1PLVT', 'INR3D16BWP12TM1PLVT', 'DEL225D1BWP12TM1PLVT', 'ND3OPTSAD4BWP12TM1PLVT', 'TPAOI31D4BWP12TM1PLVT', 'MOAI22D1BWP12TM1PLVT', 'AOI211OPTRED12BWP12TM1PLVT', 'OAI21OPTREPBD6BWP12TM1PLVT', 'GXOR2D2BWP12TM1PLVT', 'TPOAI22D4BWP12TM1PLVT', 'AOI21OPTRESAD12BWP12TM1PLVT', 'CKXOR2D0BWP12TM1PLVT', 'BMLD1BWP12TM1PLVT', 'AO21D2BWP12TM1PLVT', 'MUX3ND1BWP12TM1PLVT', 'IAO22D1BWP12TM1PLVT', 'RCOAI22D4BWP12TM1PLVT', 'AOI211D8BWP12TM1PLVT', 'DCCKND20BWP12TM1PLVT', 'INR2D4BWP12TM1PLVT', 'AOI22D8BWP12TM1PLVT', 'ND2XD3BWP12TM1PLVT', 'XOR2OPTND4BWP12TM1PLVT', 'TPAOI21D0BWP12TM1PLVT', 'NR2OPTPAD2BWP12TM1PLVT', 'OA31D16BWP12TM1PLVT', 'ND3D2BWP12TM1PLVT', 'DEL100D1BWP12TM1PLVT', 'AOI22OPTPBD2BWP12TM1PLVT', 'AN4XD1BWP12TM1PLVT', 'RCOAI21D16BWP12TM1PLVT', 'DEL1P5D1BWP12TM1PLVT', 'MUX2NXD1BWP12TM1PLVT', 'RCOAI31D8BWP12TM1PLVT', 'AO22D16BWP12TM1PLVT', 'ND2OPTPAD12BWP12TM1PLVT', 'INVOPTSAD16BWP12TM1PLVT', 'GMUX2D1BWP12TM1PLVT', 'ND3D0BWP12TM1PLVT', 'OA21D4BWP12TM1PLVT', 'AOI211OPTRESAD6BWP12TM1PLVT', 'ND3D4BWP12TM1PLVT', 'MUX2ND1BWP12TM1PLVT', 'XNR4XD0BWP12TM1PLVT', 'GAOI21D2BWP12TM1PLVT', 'BUFFD6BWP12TM1PLVT', 'AO22D1BWP12TM1PLVT', 'TPAOI211D1BWP12TM1PLVT', 'CKND16BWP12TM1PLVT', 'CKND2D0BWP12TM1PLVT', 'OAI22D0BWP12TM1PLVT', 'AOI21OPTRESAD3BWP12TM1PLVT', 'DCCKBD4BWP12TM1PLVT', 'TPOAI31D0BWP12TM1PLVT', 'OAI211OPTD6BWP12TM1PLVT', 'AOI21OPTREPBD6BWP12TM1PLVT', 'ND2XD8BWP12TM1PLVT', 'RCIAO22D1BWP12TM1PLVT', 'MUX4D0BWP12TM1PLVT', 'CKND2D1BWP12TM1PLVT', 'AOI32D2BWP12TM1PLVT', 'AOI22D2BWP12TM1PLVT', 'OAI31D1BWP12TM1PLVT', 'NR3OPTFAD12BWP12TM1PLVT', 'AO22XD4BWP12TM1PLVT', 'TPND2D1BWP12TM1PLVT', 'FIICOND2BWP12TM1PLVT', 'OA221D1BWP12TM1PLVT', 'INR3D0BWP12TM1PLVT', 'IND3D0BWP12TM1PLVT', 'NR2OPTFAD4BWP12TM1PLVT', 'RCAOI22D16BWP12TM1PLVT', 'ND2OPTPAD4BWP12TM1PLVT', 'OA21XD1BWP12TM1PLVT', 'CKBD0BWP12TM1PLVT', 'ND3OPTSAD16BWP12TM1PLVT', 'AN3XD1BWP12TM1PLVT', 'AO22XD1BWP12TM1PLVT', 'XNR3D2BWP12TM1PLVT', 'XOR4D8BWP12TM1PLVT', 'MUX2OPTD8BWP12TM1PLVT', 'GBUFFD8BWP12TM1PLVT', 'DEL050D1BWP12TM1PLVT', 'NR3D2BWP12TM1PLVT', 'BUFFXD1BWP12TM1PLVT', 'BMLD4BWP12TM1PLVT', 'AN2D8BWP12TM1PLVT', 'AOI221D0BWP12TM1PLVT', 'MOAI22D2BWP12TM1PLVT', 'AO31XD16BWP12TM1PLVT', 'ND4D8BWP12TM1PLVT', 'IOA21D1BWP12TM1PLVT', 'GAN2D1BWP12TM1PLVT', 'NR4D8BWP12TM1PLVT', 'AO221D1BWP12TM1PLVT', 'TPAOI31D2BWP12TM1PLVT', 'IND3D4BWP12TM1PLVT', 'TPND3D8BWP12TM1PLVT', 'BUFFD16BWP12TM1PLVT', 'TPOAI31D8BWP12TM1PLVT', 'OAI222D4BWP12TM1PLVT', 'AO31D8BWP12TM1PLVT', 'CKXOR2D8BWP12TM1PLVT', 'CKND2D4BWP12TM1PLVT', 'AOI21OPTREPBD1BWP12TM1PLVT', 'IND2XD0BWP12TM1PLVT', 'NR3XD16BWP12TM1PLVT', 'OR3D8BWP12TM1PLVT', 'TPAOI31D8BWP12TM1PLVT', 'NR4D0BWP12TM1PLVT', 'IND2D4BWP12TM1PLVT', 'MUX2XD4BWP12TM1PLVT', 'AOI21OPTRED2BWP12TM1PLVT', 'GINVD8BWP12TM1PLVT', 'OAI211OPTRESAD8BWP12TM1PLVT', 'RCAOI211D8BWP12TM1PLVT', 'AOI22D4BWP12TM1PLVT', 'AN2XD1BWP12TM1PLVT', 'ND4D1BWP12TM1PLVT', 'OA222D0BWP12TM1PLVT', 'OA21XD4BWP12TM1PLVT', 'MAOI222D1BWP12TM1PLVT', 'IND2XD1BWP12TM1PLVT', 'OAI32D0BWP12TM1PLVT', 'DEL2D1BWP12TM1PLVT', 'OAI211OPTRESAD4BWP12TM1PLVT', 'AO22D0BWP12TM1PLVT', 'RCAOI211D0BWP12TM1PLVT', 'AOI21OPTRESAD16BWP12TM1PLVT', 'OAI222D8BWP12TM1PLVT', 'TPAOI211D16BWP12TM1PLVT', 'AN2XD4BWP12TM1PLVT', 'XOR4XD1BWP12TM1PLVT', 'INR2XD4BWP12TM1PLVT', 'OR3XD8BWP12TM1PLVT', 'IND2D1BWP12TM1PLVT', 'RCAOI211D1BWP12TM1PLVT', 'AOI21D0BWP12TM1PLVT', 'XNR4XD8BWP12TM1PLVT', 'NR2D16BWP12TM1PLVT', 'OR2D8BWP12TM1PLVT', 'TPAOI211D4BWP12TM1PLVT', 'MUX2OPTD2BWP12TM1PLVT', 'AOI211OPTREPBD8BWP12TM1PLVT', 'INR3XD2BWP12TM1PLVT', 'DCCKBD8BWP12TM1PLVT', 'AOI211OPTREPBD6BWP12TM1PLVT', 'HA1D1BWP12TM1PLVT', 'CKND8BWP12TM1PLVT', 'AOI222XD4BWP12TM1PLVT', 'MAOI22D0BWP12TM1PLVT', 'XOR2D16BWP12TM1PLVT', 'OAI21OPTRESAD16BWP12TM1PLVT', 'MUX3D4BWP12TM1PLVT', 'ND3XD4BWP12TM1PLVT', 'TPAOI22D8BWP12TM1PLVT', 'TPAOI21D16BWP12TM1PLVT', 'AOI211D2BWP12TM1PLVT', 'AO22XD0BWP12TM1PLVT', 'INR2XD8BWP12TM1PLVT', 'MUX4XD8BWP12TM1PLVT', 'AOI211D16BWP12TM1PLVT', 'DEL500D1BWP12TM1PLVT', 'MUX4ND1BWP12TM1PLVT', 'RCAOI22D1BWP12TM1PLVT', 'IND2D0BWP12TM1PLVT', 'OAI22D1BWP12TM1PLVT', 'ND3OPTSAD24BWP12TM1PLVT', 'OR3XD16BWP12TM1PLVT', 'BUFFXD16BWP12TM1PLVT', 'MAOI222D4BWP12TM1PLVT', 'NR3OPTFAD6BWP12TM1PLVT', 'OAI211OPTD8BWP12TM1PLVT', 'NR2OPTFAD6BWP12TM1PLVT', 'AO31D0BWP12TM1PLVT', 'XOR2XD0BWP12TM1PLVT', 'AN3D0BWP12TM1PLVT', 'RCOAI21D2BWP12TM1PLVT', 'XNR2XD2BWP12TM1PLVT', 'CKMUX2D4BWP12TM1PLVT', 'AO22XD8BWP12TM1PLVT', 'AOI22OPTPBD4BWP12TM1PLVT', 'NR3OPTPAD16BWP12TM1PLVT', 'AN2D0BWP12TM1PLVT', 'CKXOR2D2BWP12TM1PLVT', 'NR3OPTPAD4BWP12TM1PLVT', 'IND4D0BWP12TM1PLVT', 'AOI211OPTRESAD16BWP12TM1PLVT', 'ND3OPTFAD8BWP12TM1PLVT', 'TPND2D8BWP12TM1PLVT', 'BUFFD0BWP12TM1PLVT', 'NR3D0BWP12TM1PLVT', 'IOA21D2BWP12TM1PLVT', 'TPOAI31D16BWP12TM1PLVT', 'OAI211D2BWP12TM1PLVT', 'AN3D16BWP12TM1PLVT', 'AO222D2BWP12TM1PLVT', 'ND2OPTD12BWP12TM1PLVT', 'XOR3D8BWP12TM1PLVT', 'NR3XD3BWP12TM1PLVT', 'OAI21OPTPBD2BWP12TM1PLVT', 'OAI32D1BWP12TM1PLVT', 'TPAOI22D16BWP12TM1PLVT', 'XOR2OPTND6BWP12TM1PLVT', 'IND2XD16BWP12TM1PLVT', 'XOR4XD8BWP12TM1PLVT', 'AOI211D4BWP12TM1PLVT', 'ND2D16BWP12TM1PLVT', 'ND2OPTFAD12BWP12TM1PLVT', 'AOI22OPTPBD8BWP12TM1PLVT', 'AOI32XD4BWP12TM1PLVT', 'INR4D1BWP12TM1PLVT', 'CKBD4BWP12TM1PLVT', 'AOI211OPTRESAD3BWP12TM1PLVT', 'AOI32D1BWP12TM1PLVT', 'MAOI222D0BWP12TM1PLVT', 'XOR4XD2BWP12TM1PLVT', 'AN4D2BWP12TM1PLVT', 'OAI211OPTRESAD6BWP12TM1PLVT', 'OR3D2BWP12TM1PLVT', 'OA31XD16BWP12TM1PLVT', 'TPND3D1BWP12TM1PLVT', 'MUX4ND0BWP12TM1PLVT', 'GBUFFD3BWP12TM1PLVT', 'IAO21D0BWP12TM1PLVT', 'BUFFD12BWP12TM1PLVT', 'MUX2NOPTD2BWP12TM1PLVT', 'NR3OPTFAD16BWP12TM1PLVT', 'MUX2XD2BWP12TM1PLVT', 'GBUFFD1BWP12TM1PLVT', 'TPND2D4BWP12TM1PLVT', 'OAI21OPTREPBD1BWP12TM1PLVT', 'AOI222D8BWP12TM1PLVT', 'MUX2NOPTD6BWP12TM1PLVT', 'NR2OPTSAD8BWP12TM1PLVT', 'NR2OPTSAD6BWP12TM1PLVT', 'OA21D8BWP12TM1PLVT', 'TPNR3D0BWP12TM1PLVT', 'NR2XD8BWP12TM1PLVT', 'GAOI21D1BWP12TM1PLVT', 'AO32D2BWP12TM1PLVT', 'GBUFFD4BWP12TM1PLVT', 'AOI21OPTRESAD4BWP12TM1PLVT', 'XOR4D4BWP12TM1PLVT', 'INR2D16BWP12TM1PLVT', 'XOR4D2BWP12TM1PLVT', 'CKND20BWP12TM1PLVT', 'BENCD4BWP12TM1PLVT', 'TPOAI21D0BWP12TM1PLVT', 'BUFFXD3BWP12TM1PLVT', 'XOR4D16BWP12TM1PLVT', 'INR2XD16BWP12TM1PLVT', 'MUX2D8BWP12TM1PLVT', 'AN4D0BWP12TM1PLVT', 'NR2OPTD12BWP12TM1PLVT', 'CKND2BWP12TM1PLVT', 'MUX2OPTD12BWP12TM1PLVT', 'XNR2D2BWP12TM1PLVT', 'BUFFXD0BWP12TM1PLVT', 'MUX3D16BWP12TM1PLVT', 'ND2OPTPAD16BWP12TM1PLVT', 'AOI21OPTRED12BWP12TM1PLVT', 'OA32D0BWP12TM1PLVT', 'MUX4XD0BWP12TM1PLVT', 'NR2XD0BWP12TM1PLVT', 'RCAOI21D2BWP12TM1PLVT', 'ND4D2BWP12TM1PLVT', 'OAI21OPTPBD1BWP12TM1PLVT', 'OA33D0BWP12TM1PLVT', 'ND2OPTFAD4BWP12TM1PLVT', 'OAI22D8BWP12TM1PLVT', 'OAI33D4BWP12TM1PLVT', 'ND2OPTPAD20BWP12TM1PLVT', 'TPND3D16BWP12TM1PLVT', 'IIND4D2BWP12TM1PLVT', 'INVD1P75BWP12TM1PLVT', 'XOR3XD16BWP12TM1PLVT', 'IND3D8BWP12TM1PLVT', 'IND2XD4BWP12TM1PLVT', 'MUX4D4BWP12TM1PLVT', 'HA1D4BWP12TM1PLVT', 'XOR2OPTND8BWP12TM1PLVT', 'CKMUX2D2BWP12TM1PLVT', 'CKBD6BWP12TM1PLVT', 'NR3OPTD12BWP12TM1PLVT', 'XNR2D1BWP12TM1PLVT', 'XNR4XD4BWP12TM1PLVT', 'OA21XD2BWP12TM1PLVT', 'AOI211OPTRED4BWP12TM1PLVT', 'OA221D0BWP12TM1PLVT', 'NR3XD2BWP12TM1PLVT', 'AOI211OPTRED2BWP12TM1PLVT', 'BUFFD3BWP12TM1PLVT', 'OA21XD0BWP12TM1PLVT', 'ND3XD8BWP12TM1PLVT', 'INR4D2BWP12TM1PLVT', 'INR3XD8BWP12TM1PLVT', 'OAI222XD4BWP12TM1PLVT', 'MUX3XD8BWP12TM1PLVT', 'TPND3D0BWP12TM1PLVT', 'OAI21D4BWP12TM1PLVT', 'XOR3D1BWP12TM1PLVT', 'XOR2D1BWP12TM1PLVT', 'NR3XD4BWP12TM1PLVT', 'AOI211OPTRESAD12BWP12TM1PLVT', 'XNR3D16BWP12TM1PLVT', 'XNR4XD16BWP12TM1PLVT', 'AO31D1BWP12TM1PLVT', 'AOI211OPTRED6BWP12TM1PLVT', 'AOI21OPTREPBD16BWP12TM1PLVT', 'AN3XD4BWP12TM1PLVT', 'CKND6BWP12TM1PLVT', 'GOAI21D2BWP12TM1PLVT', 'XNR4D16BWP12TM1PLVT', 'DCCKBD16BWP12TM1PLVT', 'OAI31D2BWP12TM1PLVT', 'OAI22OPTPBD2BWP12TM1PLVT', 'IND3D2BWP12TM1PLVT', 'OA21XD8BWP12TM1PLVT', 'TPAOI31D16BWP12TM1PLVT', 'DEL1D1BWP12TM1PLVT', 'OA22D0BWP12TM1PLVT', 'AOI21OPTPBD12BWP12TM1PLVT', 'BUFFD2BWP12TM1PLVT', 'OR2D0BWP12TM1PLVT', 'AO22D2BWP12TM1PLVT', 'TPOAI31D2BWP12TM1PLVT', 'DEL200D1BWP12TM1PLVT', 'AOI222D16BWP12TM1PLVT', 'ND2OPTPAD2BWP12TM1PLVT', 'NR3D8BWP12TM1PLVT', 'AOI22OPTPBD6BWP12TM1PLVT', 'XNR4XD1BWP12TM1PLVT', 'OA211D2BWP12TM1PLVT', 'IND4D1BWP12TM1PLVT', 'AN3D8BWP12TM1PLVT', 'XNR3XD8BWP12TM1PLVT', 'CKAN2D16BWP12TM1PLVT', 'MUX3D0BWP12TM1PLVT', 'AO211D0BWP12TM1PLVT', 'AOI33D1BWP12TM1PLVT', 'GNR2D2BWP12TM1PLVT', 'RCAOI22D8BWP12TM1PLVT', 'RCIAO21D4BWP12TM1PLVT', 'ND2OPTD20BWP12TM1PLVT', 'ND2OPTD6BWP12TM1PLVT', 'XOR2D8BWP12TM1PLVT', 'IAO21D1BWP12TM1PLVT', 'HICOND2BWP12TM1PLVT', 'GND3D2BWP12TM1PLVT', 'NR2OPTPAD8BWP12TM1PLVT', 'AOI21OPTRED4BWP12TM1PLVT', 'OAI21OPTRED2BWP12TM1PLVT', 'OR3D16BWP12TM1PLVT', 'CKBD24BWP12TM1PLVT', 'GXOR2D1BWP12TM1PLVT', 'CKBD12BWP12TM1PLVT', 'TPAOI22D2BWP12TM1PLVT', 'XOR2XD4BWP12TM1PLVT', 'INVD8BWP12TM1PLVT', 'TPOAI22D1BWP12TM1PLVT', 'DCCKBD20BWP12TM1PLVT', 'AOI222D1BWP12TM1PLVT', 'AOI21OPTRESAD8BWP12TM1PLVT', 'XNR2OPTND8BWP12TM1PLVT', 'OAI21OPTRED6BWP12TM1PLVT', 'OAI22OPTPBD1BWP12TM1PLVT', 'OAI222D1BWP12TM1PLVT', 'CMPE42D2BWP12TM1PLVT', 'TPOAI22D0BWP12TM1PLVT', 'GND2D1BWP12TM1PLVT', 'TPAOI211D8BWP12TM1PLVT', 'NR4D4BWP12TM1PLVT', 'MAOI22D4BWP12TM1PLVT', 'MUX2ND8BWP12TM1PLVT', 'TPNR3D16BWP12TM1PLVT', 'MUX2NXD4BWP12TM1PLVT', 'AOI21OPTREPBD4BWP12TM1PLVT', 'OA211D4BWP12TM1PLVT', 'OAI21OPTRESAD2BWP12TM1PLVT', 'AOI22D16BWP12TM1PLVT', 'RCAOI22D2BWP12TM1PLVT', 'NR3XD0BWP12TM1PLVT', 'AN2D1BWP12TM1PLVT', 'OAI32D2BWP12TM1PLVT', 'ND4D3BWP12TM1PLVT', 'DEL075D1BWP12TM1PLVT', 'OA21XD16BWP12TM1PLVT', 'ND3OPTPAD6BWP12TM1PLVT', 'AOI31D4BWP12TM1PLVT', 'GINVD2BWP12TM1PLVT', 'NR2OPTPAD20BWP12TM1PLVT', 'ND3OPTPAD2BWP12TM1PLVT', 'AO31D2BWP12TM1PLVT', 'XNR4D4BWP12TM1PLVT', 'AO221D2BWP12TM1PLVT', 'XOR3XD4BWP12TM1PLVT', 'FCICIND2BWP12TM1PLVT', 'RCIAO22D2BWP12TM1PLVT', 'AO31D16BWP12TM1PLVT', 'MUX2XD0BWP12TM1PLVT', 'CKBD2BWP12TM1PLVT', 'OAI211D1BWP12TM1PLVT', 'GINVD1BWP12TM1PLVT', 'OAI211OPTRESAD16BWP12TM1PLVT', 'XOR3D4BWP12TM1PLVT', 'INR3D1BWP12TM1PLVT', 'FICIND1BWP12TM1PLVT', 'DCCKBD12BWP12TM1PLVT', 'OR4D0BWP12TM1PLVT', 'XNR2OPTND2BWP12TM1PLVT', 'TPOAI31D4BWP12TM1PLVT', 'INVD1BWP12TM1PLVT', 'OA31XD4BWP12TM1PLVT', 'CKAN2D0BWP12TM1PLVT', 'XNR2XD8BWP12TM1PLVT', 'IAO22D2BWP12TM1PLVT', 'DEL175D1BWP12TM1PLVT', 'XNR2D0BWP12TM1PLVT', 'XNR4D8BWP12TM1PLVT', 'NR2OPTD20BWP12TM1PLVT', 'MUX2XD16BWP12TM1PLVT', 'MUX2NXD0BWP12TM1PLVT', 'MUX2ND4BWP12TM1PLVT', 'RCOAI21D8BWP12TM1PLVT', 'AN3XD8BWP12TM1PLVT', 'NR4D1BWP12TM1PLVT', 'TPND2D0BWP12TM1PLVT', 'NR2D4BWP12TM1PLVT', 'AO32D4BWP12TM1PLVT', 'AOI21D16BWP12TM1PLVT', 'TPNR2D8BWP12TM1PLVT', 'OAI211OPTRED6BWP12TM1PLVT', 'OA31D1BWP12TM1PLVT', 'AN2D4BWP12TM1PLVT', 'ND2D8BWP12TM1PLVT', 'XNR3XD16BWP12TM1PLVT', 'BUFFXD12BWP12TM1PLVT', 'XOR2XD2BWP12TM1PLVT', 'ND3OPTPAD8BWP12TM1PLVT', 'OAI211OPTREPBD2BWP12TM1PLVT', 'BUFTD12BWP12TM1PLVT', 'BUFTD16BWP12TM1PLVT', 'BUFTD0BWP12TM1PLVT', 'BUFTD3BWP12TM1PLVT', 'FCSICIND1BWP12TM1PLVT', 'BHDBWP12TM1PLVT', 'GTIEHBWP12TM1PLVT', 'GTIELBWP12TM1PLVT', 'FCSICIND2BWP12TM1PLVT', 'BUFTD24BWP12TM1PLVT', 'FCSICOND1BWP12TM1PLVT', 'BUFTD1BWP12TM1PLVT', 'HCOSCOND1BWP12TM1PLVT', 'BUFTD4BWP12TM1PLVT', 'HCOSCIND2BWP12TM1PLVT', 'TIELBWP12TM1PLVT', 'BUFTD2BWP12TM1PLVT', 'HCOSCOND2BWP12TM1PLVT', 'TIEHBWP12TM1PLVT', 'BUFTD8BWP12TM1PLVT', 'BUFTD6BWP12TM1PLVT', 'FCSICOND2BWP12TM1PLVT', 'HCOSCIND1BWP12TM1PLVT', 'BUFTD20BWP12TM1PLVT']


    no_pins=['OD25DCAP16BWP12TM1PLVT', 'DCAP32BWP12TM1PLVT', 'GFILL2BWP12TM1PLVT', 'GDCAP3BWP12TM1PLVT', 'DCAP4BWP12TM1PLVT', 'GFILL10BWP12TM1PLVT', 'OD25DCAP64BWP12TM1PLVT', 'GFILL3BWP12TM1PLVT', 'GFILLBWP12TM1PLVT', 'DCAP16BWP12TM1PLVT', 'GDCAP10BWP12TM1PLVT', 'DCAPBWP12TM1PLVT', 'DCAP8BWP12TM1PLVT', 'GDCAP2BWP12TM1PLVT', 'GDCAP4BWP12TM1PLVT', 'GFILL4BWP12TM1PLVT', 'OD25DCAP32BWP12TM1PLVT', 'GDCAPBWP12TM1PLVT', 'DCAP64BWP12TM1PLVT']


    if diff!='1':
        for idx in range(len(clock_doubt_list)):
            clock_doubt_list[idx]=clock_doubt_list[idx].split('LVT')[0]

        for idx in range(len(no_pins)):
            no_pins[idx]=no_pins[idx].split('LVT')[0]

        for idx in range(len(checking_combination)):
            checking_combination[idx]=checking_combination[idx].split('LVT')[0]
        checking_combination.append('TPNR2D2BWP12TM1P')
        checking_combination.append('INVD2BWP12TM1P')


    file_list=os.listdir(address)

    for ivalue in clock_doubt_list:
        file_list.remove(ivalue)

    for ivalue in no_pins:
        file_list.remove(ivalue)

    #for ivalue in checking_combination:
    #    file_list.remove(ivalue)


    tt=int()
    #print(len(file_list))
    all_dict=dict()
    checking_list=list()
    for ivalue in file_list:
        if ivalue=='temp_function_groups_'+address.split('/')[-1]+'.json':
            continue
        if 'pin' in os.listdir(address+'/'+ivalue+'/'):

            checking_list.append(ivalue)

            print(ivalue)
            che='che'
            temp_dict=dict()
            for kvalue in os.listdir(address+'/'+ivalue+'/pin'):
                #if ttt>0:
                #    break

                if kvalue =='naive.txt' or '.txt' not in kvalue:
                    continue
                
                temp_txt=address+'/'+ivalue+'/pin/'+kvalue
                with open(temp_txt,'r') as fw:
                    lines=fw.readlines()
                fw.close()

                temp_pin=str()
                direction=str()
                function_output=str()
                related_ground_pin=str()
                related_power_pin=str()
                power_down_function=str()
                three_state=str()
                driver_type=str()

                capa=float()
                fall_capa=float()
                rise_capa=float()
                max_capa=float()

                internal_power_start=list()
                internal_power_end=list()
                internal_power_info=list()

                timing_start=list()
                timing_end=list()
                timing_info=list()
                
                ccsn_first_start=list()
                ccsn_first_end=list()
                ccsn_first_info=list()

                ccsn_last_start=list()
                ccsn_last_end=list()
                ccsn_last_info=list()

                receiver_capacitance_start=list()
                receiver_capacitance_end=list()
                receiver_capacitance_info=list()

                will_del=list()

                checking_rdx=list()
                for rdx in range(len(lines)):
                    checking_rdx.append(rdx)
                    if lines[rdx].replace('\n','').strip().startswith('pin('):
                        temp_pin=lines[rdx].replace('\n','').strip().split('pin(')[1].split(')')[0].strip()
                        temp_dict.update({temp_pin:dict()})
                        will_del.append(rdx)

                    elif lines[rdx].replace('\n','').strip().startswith('direction'):
                        direction=lines[rdx].replace('\n','').strip().split(':')[1].strip().split(';')[0].strip()
                        temp_dict[temp_pin].update({'direction':direction})
                        will_del.append(rdx)

                    elif lines[rdx].replace('\n','').strip().startswith('driver_type'):
                        driver_type=lines[rdx].replace('\n','').strip().split(':')[1].strip().split(';')[0].strip()
                        temp_dict[temp_pin].update({'driver_type':driver_type})
                        will_del.append(rdx)

                    elif lines[rdx].replace('\n','').strip().startswith('function'):
                        function_output=lines[rdx].replace('\n','').strip().split('\"')[1].strip()
                        temp_dict[temp_pin].update({'function':function_output})
                        will_del.append(rdx)

                    elif lines[rdx].replace('\n','').strip().startswith('capacitance'):
                        capa=float(lines[rdx].replace('\n','').strip().split(':')[1].strip().split(';')[0].strip())
                        temp_dict[temp_pin].update({'capacitance':capa})
                        will_del.append(rdx)

                    elif lines[rdx].replace('\n','').strip().startswith('rise_capacitance'):
                        rise_capa=float(lines[rdx].replace('\n','').strip().split(':')[1].strip().split(';')[0].strip())
                        temp_dict[temp_pin].update({'rise_capacitance':rise_capa})
                        will_del.append(rdx)

                    elif lines[rdx].replace('\n','').strip().startswith('fall_capacitance'):
                        fall_capa=float(lines[rdx].replace('\n','').strip().split(':')[1].strip().split(';')[0].strip())
                        temp_dict[temp_pin].update({'fall_capacitance':fall_capa})
                        will_del.append(rdx)
                        
                    elif lines[rdx].replace('\n','').strip().startswith('related_ground_pin'):
                        related_ground_pin=lines[rdx].replace('\n','').strip().split(':')[1].strip().split(';')[0].strip()
                        temp_dict[temp_pin].update({'related_ground_pin':related_ground_pin})
                        will_del.append(rdx)

                    elif lines[rdx].replace('\n','').strip().startswith('related_power_pin'):
                        related_power_pin=lines[rdx].replace('\n','').strip().split(':')[1].strip().split(';')[0].strip()
                        temp_dict[temp_pin].update({'related_power_pin':related_power_pin})
                        will_del.append(rdx)

                    elif lines[rdx].replace('\n','').strip().startswith('power_down_function'):
                        power_down_function=lines[rdx].replace('\n','').strip().split('\"')[1].strip()
                        temp_dict[temp_pin].update({'power_down_function':power_down_function})
                        will_del.append(rdx)

                    elif lines[rdx].replace('\n','').strip().startswith('three_state'):
                        three_state=lines[rdx].replace('\n','').strip().split('\"')[1].strip()
                        temp_dict[temp_pin].update({'three_state':three_state})
                        will_del.append(rdx)

                    elif lines[rdx].replace('\n','').strip().startswith('max_capacitance'):
                        max_capa=float(lines[rdx].replace('\n','').strip().split(':')[1].strip().split(';')[0].strip())
                        temp_dict[temp_pin].update({'max_capacitance':max_capa})
                        will_del.append(rdx)
                    
                    elif lines[rdx].replace('\n','').strip().startswith('internal_power ('):
                        internal_power_start.append(rdx)
                        internal_power_end.append(counting_function(rdx,lines))


                internal_power_start.reverse()
                internal_power_end.reverse()

                for rdx in range(len(internal_power_start)):
                    for tdx in range(internal_power_end[rdx]-internal_power_start[rdx]+1):
                        internal_power_info.append(lines[internal_power_end[rdx]-tdx])
                        del checking_rdx[internal_power_end[rdx]-tdx]

                for rvalue in will_del:
                    checking_rdx.remove(rvalue)

                if len(checking_rdx)!=1:
                    for rdx in range(len(checking_rdx)):
                        if lines[checking_rdx[rdx]].strip().startswith('timing ('):
                            timing_start.append(checking_rdx[rdx])
                            timing_end.append(counting_function(checking_rdx[rdx],lines))

                    timing_start.reverse()
                    timing_end.reverse()

                    for rdx in range(len(timing_start)):
                        for tdx in range(timing_end[rdx]-timing_start[rdx]+1):
                            timing_info.append(lines[timing_end[rdx]-tdx])
                            checking_rdx.remove(timing_end[rdx]-tdx)

                if len(checking_rdx)!=1:
                    for rdx in range(len(checking_rdx)):
                        if lines[checking_rdx[rdx]].strip().startswith('ccsn_first_stage ('):
                            ccsn_first_start.append(checking_rdx[rdx])
                            ccsn_first_end.append(counting_function(checking_rdx[rdx],lines))

                    ccsn_first_start.reverse()
                    ccsn_first_end.reverse()
                    for rdx in range(len(ccsn_first_start)):
                        for tdx in range(ccsn_first_end[rdx]-ccsn_first_start[rdx]+1):
                            ccsn_first_info.append(lines[ccsn_first_end[rdx]-tdx])
                            checking_rdx.remove(ccsn_first_end[rdx]-tdx)

                if len(checking_rdx)!=1:
                    for rdx in range(len(checking_rdx)):
                        if lines[checking_rdx[rdx]].strip().startswith('ccsn_last_stage ('):
                            
                            ccsn_last_start.append(checking_rdx[rdx])
                            ccsn_last_end.append(counting_function(checking_rdx[rdx],lines))

                    ccsn_last_start.reverse()
                    ccsn_last_end.reverse()

                    for rdx in range(len(ccsn_last_start)):
                        for tdx in range(ccsn_last_end[rdx]-ccsn_last_start[rdx]+1):
                            ccsn_last_info.append(lines[ccsn_last_end[rdx]-tdx])
                            checking_rdx.remove(ccsn_last_end[rdx]-tdx)


                if len(checking_rdx)!=1:
                    for rdx in range(len(checking_rdx)):
                        if lines[checking_rdx[rdx]].strip().startswith('receiver_capacitance ('):
                            
                            receiver_capacitance_start.append(checking_rdx[rdx])
                            receiver_capacitance_end.append(counting_function(checking_rdx[rdx],lines))

                    receiver_capacitance_start.reverse()
                    receiver_capacitance_end.reverse()

                    for rdx in range(len(receiver_capacitance_start)):
                        for tdx in range(receiver_capacitance_end[rdx]-receiver_capacitance_start[rdx]+1):
                            receiver_capacitance_info.append(lines[receiver_capacitance_end[rdx]-tdx])
                            checking_rdx.remove(receiver_capacitance_end[rdx]-tdx)

                if len(internal_power_info)!=0 or len(timing_info)!=0 or len(ccsn_first_info)!=0 or len(ccsn_last_info)!=0 or len(receiver_capacitance_info)!=0:

                    if temp_dict[temp_pin]['direction']+'_'+temp_pin not in os.listdir(address+'/'+ivalue+'/pin'):
                        os.mkdir(address+'/'+ivalue+'/pin/'+temp_dict[temp_pin]['direction']+'_'+temp_pin)

                    internal_power_info.reverse()
                    timing_info.reverse()
                    ccsn_first_info.reverse()
                    ccsn_last_info.reverse()
                    receiver_capacitance_info.reverse()
                    
                    if len(internal_power_info)!=0:
                        for rdx in range(len(internal_power_info)):
                            if rdx==0:
                                with open(address+'/'+ivalue+'/pin/'+temp_dict[temp_pin]['direction']+'_'+temp_pin+'/internal_power.txt','w') as fw:
                                    fw.write(internal_power_info[rdx])
                                fw.close()
                            else:
                                with open(address+'/'+ivalue+'/pin/'+temp_dict[temp_pin]['direction']+'_'+temp_pin+'/internal_power.txt','a') as fw:
                                    fw.write(internal_power_info[rdx])
                                fw.close()

                    if len(timing_info)!=0:
                        for rdx in range(len(timing_info)):
                            if rdx==0:
                                with open(address+'/'+ivalue+'/pin/'+temp_dict[temp_pin]['direction']+'_'+temp_pin+'/timing.txt','w') as fw:
                                    fw.write(timing_info[rdx])
                                fw.close()
                            else:
                                with open(address+'/'+ivalue+'/pin/'+temp_dict[temp_pin]['direction']+'_'+temp_pin+'/timing.txt','a') as fw:
                                    fw.write(timing_info[rdx])
                                fw.close()

                    if len(ccsn_first_info)!=0:
                        for rdx in range(len(ccsn_first_info)):
                            if rdx==0:
                                with open(address+'/'+ivalue+'/pin/'+temp_dict[temp_pin]['direction']+'_'+temp_pin+'/ccsn_first_stage.txt','w') as fw:
                                    fw.write(ccsn_first_info[rdx])
                                fw.close()
                            else:
                                with open(address+'/'+ivalue+'/pin/'+temp_dict[temp_pin]['direction']+'_'+temp_pin+'/ccsn_first_stage.txt','a') as fw:
                                    fw.write(ccsn_first_info[rdx])
                                fw.close()

                    if len(ccsn_last_info)!=0:
                        for rdx in range(len(ccsn_last_info)):
                            if rdx==0:
                                with open(address+'/'+ivalue+'/pin/'+temp_dict[temp_pin]['direction']+'_'+temp_pin+'/ccsn_last_stage.txt','w') as fw:
                                    fw.write(ccsn_last_info[rdx])
                                fw.close()
                            else:
                                with open(address+'/'+ivalue+'/pin/'+temp_dict[temp_pin]['direction']+'_'+temp_pin+'/ccsn_last_stage.txt','a') as fw:
                                    fw.write(ccsn_last_info[rdx])
                                fw.close()

                    if len(receiver_capacitance_info)!=0:
                        for rdx in range(len(receiver_capacitance_info)):
                            if rdx==0:
                                with open(address+'/'+ivalue+'/pin/'+temp_dict[temp_pin]['direction']+'_'+temp_pin+'/receiver_capacitance.txt','w') as fw:
                                    fw.write(receiver_capacitance_info[rdx])
                                fw.close()
                            else:
                                with open(address+'/'+ivalue+'/pin/'+temp_dict[temp_pin]['direction']+'_'+temp_pin+'/receiver_capacitance.txt','a') as fw:
                                    fw.write(receiver_capacitance_info[rdx])
                                fw.close()

            all_dict.update({ivalue:temp_dict})




    return all_dict




def counting_function(start_number,lines):
    left=int()
    right=int()
    if  '{' in lines[start_number]:
        left=left+1
    if  '}' in lines[start_number]:
        right=right+1

    for idx in range(len(lines)-start_number-1):
        if '{' in lines[start_number+idx+1]:
            left=left+1
        if '}' in lines[start_number+idx+1]:
            right=right+1
        if left==right:
            return start_number+idx+1





def get_function_equation(info,functions,lib):
    sign_list=list()
    for ivalue in info:
        temp_function=list()
        temp_output_pins=dict()
        other_input_pins=list()

        for kvalue in info[ivalue]:
            if info[ivalue][kvalue]['direction']=='output':
                temp_output_pins.update({kvalue:info[ivalue][kvalue]['function']})
            elif info[ivalue][kvalue]['direction']=='input':
                other_input_pins.append(kvalue)

        temp_input_pins=copy.deepcopy(other_input_pins)
        for kdx in range(len(other_input_pins)):
            for tdx in range(len(temp_input_pins)):
                if tdx ==0:
                    continue
                if len(other_input_pins[tdx])>len(other_input_pins[tdx-1]):
                    temp=other_input_pins[tdx]
                    other_input_pins[tdx]=other_input_pins[tdx-1]
                    other_input_pins[tdx-1]=temp
                    break

        for kvalue in temp_output_pins:
            temp_output_pins[kvalue]=''.join(temp_output_pins[kvalue].split('('))
            temp_output_pins[kvalue]=''.join(temp_output_pins[kvalue].split(')'))
            temp_output_pins[kvalue]=''.join(temp_output_pins[kvalue].split(' '))
            
            for tvalue in other_input_pins:
                temp_output_pins[kvalue]=''.join(temp_output_pins[kvalue].split(tvalue))
            
            for tvalue in temp_output_pins:
                if tvalue==kvalue:
                    continue
                temp_output_pins[kvalue]=''.join(temp_output_pins[kvalue].split(tvalue))
        
        for kvalue in temp_output_pins:
            for tvalue in temp_output_pins[kvalue]:
                if tvalue not in temp_function:
                    temp_function.append(tvalue)

        for kvalue in temp_function:
            if kvalue not in sign_list:
                sign_list.append(kvalue)

    checking_list=list()
    print(sign_list)
    print()
    print('#################################################################################################################################')
    print()
    tt=int()
    for ivalue in functions:
        for kvalue in functions[ivalue]:
            if 'pin' not in os.listdir(lib+'/'+ivalue):
                continue
            
            if 'output_'+kvalue not in os.listdir(lib+'/'+ivalue+'/pin'):
                continue

            if 'timing.txt' in os.listdir(lib+'/'+ivalue+'/pin/output_'+kvalue):
                with open(lib+'/'+ivalue+'/pin/output_'+kvalue+'/timing.txt','r') as fw:
                    lines=fw.readlines()
                fw.close()

            else:
                continue

            for tvalue in functions[ivalue][kvalue]:
                #print(functions[ivalue][kvalue][tvalue])
                case_from_timing=dict()
                for rdx in range(len(lines)):
                    
                    if lines[rdx].replace('\n','').strip().startswith('related_pin : '+'\"'+tvalue):
                        if lines[rdx+1].replace('\n','').strip().startswith('sdf_cond :'):
                            continue
                            print(ivalue)
                            print(kvalue)
                            print(tvalue)
                            print(lines[rdx].replace('\n',''))
                            print(lines[rdx+1].replace('\n',''))
                            print(lines[rdx+2].replace('\n',''))
                            print(lines[rdx+3].replace('\n',''))
                            print()
                        
                        print(ivalue)
                        if ivalue not in checking_list:
                            checking_list.append(ivalue)
                        print(kvalue)
                        print(tvalue)
                        print(lines[rdx].replace('\n',''))
                        print(lines[rdx+1].replace('\n',''))
                        print(lines[rdx+2].replace('\n',''))
                        print(lines[rdx+3].replace('\n',''))
                        print()
    
    print(checking_list)
    print(len(checking_list))
    print(len(functions))
        #tt=tt+1
        #if tt>0:
        #    break

    return sign_list







def get_truthtable(info):
    che='che'
    all_output_dict=dict()
    for ivalue in info:
        print(ivalue)
        temp_output_dict=dict()
        temp_output_pins=dict()
        other_input_pins=list()

        for kvalue in info[ivalue]:
            if info[ivalue][kvalue]['direction']=='output':
                temp_output_pins.update({kvalue:info[ivalue][kvalue]['function']})
            elif info[ivalue][kvalue]['direction']=='input':
                other_input_pins.append(kvalue)

        temp_input_pins=copy.deepcopy(other_input_pins)
        for kdx in range(len(other_input_pins)):
            for tdx in range(len(temp_input_pins)):
                if tdx ==0:
                    continue

                if len(other_input_pins[tdx])>len(other_input_pins[tdx-1]):
                    temp=other_input_pins[tdx]
                    other_input_pins[tdx]=other_input_pins[tdx-1]
                    other_input_pins[tdx-1]=temp
                    break
        
        for kvalue in temp_output_pins:
            temp_function=str()
            temp_function=info[ivalue][kvalue]['function'].replace(' ! ','~').replace(' + ','|').replace('! ','~').replace('+ ','|').replace(' !','~').replace(' +','|').replace('!','~').replace('+','|')
            temp_function=temp_function.replace(' ','&')

            one_dict=get_cases(other_input_pins,temp_function)
            temp_output_dict.update({kvalue:one_dict})
        all_output_dict.update({ivalue:checking_cases(temp_output_dict)})


    return all_output_dict




def get_cases(inputs, function):

    all_dict=dict()
    temp_inputs_in_function=list()
    temp_function=function

    for ivalue in inputs:
        if ivalue in temp_function:
            temp_inputs_in_function.append(ivalue)
            temp_function=''.join(temp_function.split(ivalue))

    decoder_list=list()
    range_idx=1
    for idx in range(len(temp_inputs_in_function)):
        range_idx=range_idx*2

    for idx in range(range_idx):
        temp_vector=list(str(bin(idx)).split('0b')[1])

        if len(temp_vector)<len(temp_inputs_in_function):
            zero_list=list()
            for kdx in range(len(temp_inputs_in_function)-len(temp_vector)):
                zero_list.append('0')
            temp_vector=zero_list+temp_vector

        decoder_list.append(temp_vector)
    
    all_dict.update({'inputs':temp_inputs_in_function})
    all_dict.update({'result':list()})

    proto_function=function.replace(' ! ','~').replace(' + ','|').replace('! ','~').replace('+ ','|').replace(' !','~').replace(' +','|').replace('!','~').replace('+','|')
    proto_function=proto_function.replace(' ','&')
    for idx in range(len(decoder_list)):
        temp_function=proto_function
        
        
        for kdx in range(len(temp_inputs_in_function)):
            temp_function=temp_function.replace(temp_inputs_in_function[kdx],decoder_list[idx][kdx])
        temp_function=eval(temp_function)
        if temp_function<0:
            temp_function=temp_function*(-1)
            temp_function=temp_function%2
        elif temp_function>1:
            temp_function=temp_function%2

        all_dict['result'].append(temp_function)

    return all_dict





def checking_cases(one_dict):
    all_related_pins=dict()
    for ivalue in one_dict:
        all_related_pins.update({ivalue:dict()})
        decoder_list=list()
        range_idx=1
        if len(one_dict[ivalue]['inputs'])==0:
            continue
        
        for kdx in range(len(one_dict[ivalue]['inputs'])):
            range_idx=range_idx*2
        
        for kdx in range(range_idx):
            temple=list(str(bin(kdx)).split('0b')[1])
            zero_list=list()
            if len(temple)<len(one_dict[ivalue]['inputs']):
                for rdx in range(len(one_dict[ivalue]['inputs'])-len(temple)):
                    zero_list.append('0')
            temple=zero_list+temple
            
            for rdx in range(len(temple)):
                temple[rdx]=int(temple[rdx])
            temple.append(kdx)
            temple.append(one_dict[ivalue]['result'][kdx])
            

            decoder_list.append(temple)
        

        columnlist=copy.deepcopy(one_dict[ivalue]['inputs'])
        columnlist.append('idx')
        columnlist.append('result')
        
        df=pd.DataFrame(data=decoder_list,columns=columnlist)
        cases=get_unateness(df)
        all_related_pins[ivalue].update(cases)
        for kdx in range(len(one_dict[ivalue]['inputs'])-1):
            df=get_pandas_idx(df)

            cases=get_unateness(df)
            all_related_pins[ivalue].update(cases)
            
    
    return all_related_pins





def get_pandas_idx(df1):
    previous_columnlist=list(df1.columns)
    previous_columnlist.remove('idx')
    previous_columnlist.remove('result')
    
    new_columnlist=list()
    for idx in range(len(previous_columnlist)):
        if idx==0:
            continue
        new_columnlist.append(previous_columnlist[idx])
    
    new_columnlist.append(previous_columnlist[0])
    will_fix=copy.deepcopy(new_columnlist)
    new_columnlist.append('result')

    
    new_data=list()

    for idx in range(len(df1.index)):
        temp_data=list()
        for kvalue in new_columnlist:
            temp_data.append(df1[kvalue][idx])
        new_data.append(temp_data)


    new_df=pd.DataFrame(data=new_data,columns=new_columnlist)


    temp_list=copy.deepcopy(new_columnlist)
    temp_list.remove('result')
    
    new_idx=list()
    for idx in range(len(new_df.index)):
        temp_idx=str()
        for kvalue in temp_list:
            temp_idx=temp_idx+str(int(new_df.iloc[idx:idx+1,:-1][kvalue]))
        temp_idx='0b'+temp_idx
        new_idx.append(int(temp_idx,2))
    new_df['idx']=new_idx

    will_fix.append('idx')
    will_fix.append('result')

    new_df=new_df[will_fix]
    
    new_df=new_df.sort_values(by=['idx'],ascending=True)

    return new_df







def get_unateness(df1):
    case=dict()
    checking_index=list(df1.columns)[-3]
    case.update({checking_index:dict()})

    other_inputs=list(df1.columns)
    other_inputs.remove('idx')
    other_inputs.remove('result')
    other_inputs.remove(checking_index)

    result_info=list(df1['result'])
    
    for idx in range(int(len(result_info)/2)):
        if result_info[idx*2]!=result_info[idx*2+1]:
            temp_string=str()
            for kdx in range(len(other_inputs)):

                temp_string=temp_string+' '+other_inputs[kdx]+'__'+str(list(df1[other_inputs[kdx]])[idx*2])
            temp_string=temp_string.strip()
            
            if result_info[idx*2]==0:
                case[checking_index].update({temp_string:'positive_unateness'})
            else:
                case[checking_index].update({temp_string:'negative_unateness'})

    return case




if __name__=="__main__":


    checking='tcbn40lpbwp12tm1plvttc_ccs'
    checking='tcbn40lpbwp12tm1ptc_ccs'

    lib_address='../../data/20221219/LIB/'
    lib_address=lib_address+checking
    difff=str()
    if 'tcbn40lpbwp12tm1plvttc_ccs' in lib_address:
        difff='1'
    else:
        difff='0'
    if sys.argv[1]=='0':
        temp=get_statetable(lib_address,difff)
        with open(lib_address+'/temp_function_groups_'+checking+'.json','w') as fw:
            json.dump(temp,fw,indent=4)
        fw.close()


    elif sys.argv[1]=='1':
        with open(lib_address+'/temp_function_groups_'+checking+'.json','r') as fw:
            temp=json.load(fw)
        fw.close()
        temp=get_truthtable(temp)
        with open('temp_function_'+checking+'.json','w') as fw:
            json.dump(temp,fw,indent=4)
        fw.close()


    elif sys.argv[1]=='2': ######## 쓰고 있는 기호가 !, ^, ' ',+ 만 쓰이는지 확인
        with open(lib_address+'/temp_function_groups_'+checking+'.json','r') as fw:
            temp=json.load(fw)
        fw.close()

        with open('temp_function_'+checking+'.json','r') as fw:
            temp1=json.load(fw)
        fw.close()

        get_function_equation(temp,temp1,lib_address)


            

